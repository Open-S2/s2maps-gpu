// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GLSL grammar snapshots parses a test program 1`] = `
Program                                                     ⮐ float foo = 1.0;⮐ 
  GlobalDeclaration                                         float foo = 1.0;
    VariableDeclaration                                     float foo = 1.0
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      SingleDeclaration                                     foo = 1.0
        DeclarationSpecifier                                foo
          Identifier                                        foo
        Number                                              1.0
`;

exports[`GLSL grammar snapshots parses a test program 2`] = `
Program                                                     ⮐ #define WAT⮐ 
  Preprocessor                                              #define WAT
    Directive                                               define
      define                                                define
    UntilEOL                                                 WAT
`;

exports[`GLSL grammar snapshots parses a test program 3`] = `
Program                                                     ⮐ struct light {⮐  float intensity;⮐  vec3 position;⮐ } lightVar;⮐ ⮐ struct light2 {⮐  float intensity;⮐  vec3 position;⮐ };⮐ 
  GlobalDeclaration                                         struct light {⮐  float intensity;⮐  vec3 position;⮐ } lightVar;
    VariableDeclaration                                     struct light {⮐  float intensity;⮐  vec3 position;⮐ } lightVar
      QualifiedType                                         struct light {⮐  float intensity;⮐  vec3 position;⮐ }
        TypeSpecifier                                       struct light {⮐  float intensity;⮐  vec3 position;⮐ }
          Struct                                            struct light {⮐  float intensity;⮐  vec3 position;⮐ }
            struct                                          struct
            Identifier                                      light
            StructDeclarationList                           float intensity;⮐  vec3 position;
              StructDeclaration                             float intensity;
                TypeSpecifier                               float
                  float                                     float
                StructDeclarationSpecifier                  intensity
                  PrivateIdentifier                         intensity
                    Identifier                              intensity
              StructDeclaration                             vec3 position;
                TypeSpecifier                               vec3
                  vec3                                      vec3
                StructDeclarationSpecifier                  position
                  PrivateIdentifier                         position
                    Identifier                              position
      SingleDeclaration                                     lightVar
        DeclarationSpecifier                                lightVar
          Identifier                                        lightVar
  GlobalDeclaration                                         struct light2 {⮐  float intensity;⮐  vec3 position;⮐ };
    VariableDeclaration                                     struct light2 {⮐  float intensity;⮐  vec3 position;⮐ }
      QualifiedType                                         struct light2 {⮐  float intensity;⮐  vec3 position;⮐ }
        TypeSpecifier                                       struct light2 {⮐  float intensity;⮐  vec3 position;⮐ }
          Struct                                            struct light2 {⮐  float intensity;⮐  vec3 position;⮐ }
            struct                                          struct
            Identifier                                      light2
            StructDeclarationList                           float intensity;⮐  vec3 position;
              StructDeclaration                             float intensity;
                TypeSpecifier                               float
                  float                                     float
                StructDeclarationSpecifier                  intensity
                  PrivateIdentifier                         intensity
                    Identifier                              intensity
              StructDeclaration                             vec3 position;
                TypeSpecifier                               vec3
                  vec3                                      vec3
                StructDeclarationSpecifier                  position
                  PrivateIdentifier                         position
                    Identifier                              position
`;

exports[`GLSL grammar snapshots parses a test program 4`] = `
Program                                                     ⮐ void main();⮐ 
  GlobalDeclaration                                         void main();
    FunctionPrototype                                       void main()
      QualifiedType                                         void
        TypeSpecifier                                       void
          void                                              void
      Identifier                                            main
`;

exports[`GLSL grammar snapshots parses a test program 5`] = `
Program                                                     ⮐ layout(location = 0) in wat;⮐ layout(location = 0) in wat1, wat2;⮐ layout(location = 1) in vec2;⮐ 
  GlobalDeclaration                                         layout(location = 0) in wat;
    QualifiedDeclaration                                    layout(location = 0) in wat
      TypeQualifier                                         layout(location = 0) in
        LayoutQualifier                                     layout(location = 0)
          layout                                            layout
          LayoutQualifierId                                 location = 0
            PrivateIdentifier                               location
              Identifier                                    location
            Number                                          0
        StorageQualifier                                    in
          in                                                in
      Identifier                                            wat
  GlobalDeclaration                                         layout(location = 0) in wat1, wat2;
    QualifiedDeclaration                                    layout(location = 0) in wat1, wat2
      TypeQualifier                                         layout(location = 0) in
        LayoutQualifier                                     layout(location = 0)
          layout                                            layout
          LayoutQualifierId                                 location = 0
            PrivateIdentifier                               location
              Identifier                                    location
            Number                                          0
        StorageQualifier                                    in
          in                                                in
      Identifier                                            wat1
      Identifier                                            wat2
  GlobalDeclaration                                         layout(location = 1) in vec2;
    VariableDeclaration                                     layout(location = 1) in vec2
      QualifiedType                                         layout(location = 1) in vec2
        TypeQualifier                                       layout(location = 1) in
          LayoutQualifier                                   layout(location = 1)
            layout                                          layout
            LayoutQualifierId                               location = 1
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        1
          StorageQualifier                                  in
            in                                              in
        TypeSpecifier                                       vec2
          vec2                                              vec2
`;

exports[`GLSL grammar snapshots parses a test program 6`] = `
Program                                                     ⮐ float foo = 1.0;⮐ #define WAT⮐ void main() {⮐   int bar = wat(5, 6);⮐   int x = 4 + 5 + +6;⮐   struct s { } x;⮐   gl_FragColor = vec4(0.1, 0.2, 0.3, 1.0);⮐ }⮐ 
  GlobalDeclaration                                         float foo = 1.0;
    VariableDeclaration                                     float foo = 1.0
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      SingleDeclaration                                     foo = 1.0
        DeclarationSpecifier                                foo
          Identifier                                        foo
        Number                                              1.0
  Preprocessor                                              #define WAT
    Directive                                               define
      define                                                define
    UntilEOL                                                 WAT
  FunctionDefinition                                        void main() {⮐   int bar = wat(5, 6);⮐   int x = 4 + 5 + +6;⮐   struct s { } x;⮐   gl_FragColor = vec4(0.1, 0.2, 0.3, 1.0);⮐ }
    FunctionPrototype                                       void main()
      QualifiedType                                         void
        TypeSpecifier                                       void
          void                                              void
      Identifier                                            main
    StatementList                                           int bar = wat(5, 6);⮐   int x = 4 + 5 + +6;⮐   struct s { } x;⮐   gl_FragColor = vec4(0.1, 0.2, 0.3, 1.0);
      Statement                                             int bar = wat(5, 6);
        DeclarationStatement                                int bar = wat(5, 6);
          LocalDeclaration                                  int bar = wat(5, 6);
            VariableDeclaration                             int bar = wat(5, 6)
              QualifiedType                                 int
                TypeSpecifier                               int
                  int                                       int
              SingleDeclaration                             bar = wat(5, 6)
                DeclarationSpecifier                        bar
                  Identifier                                bar
                FunctionCall                                wat(5, 6)
                  Identifier                                wat
                  Number                                    5
                  Number                                    6
      Statement                                             int x = 4 + 5 + +6;
        DeclarationStatement                                int x = 4 + 5 + +6;
          LocalDeclaration                                  int x = 4 + 5 + +6;
            VariableDeclaration                             int x = 4 + 5 + +6
              QualifiedType                                 int
                TypeSpecifier                               int
                  int                                       int
              SingleDeclaration                             x = 4 + 5 + +6
                DeclarationSpecifier                        x
                  Identifier                                x
                Binary                                      4 + 5 + +6
                  Binary                                    4 + 5
                    Number                                  4
                    Add                                     +
                    Number                                  5
                  Add                                       +
                  Unary                                     +6
                    Add                                     +
                    Number                                  6
      Statement                                             struct s { } x;
        DeclarationStatement                                struct s { } x;
          LocalDeclaration                                  struct s { } x;
            VariableDeclaration                             struct s { } x
              QualifiedType                                 struct s { }
                TypeSpecifier                               struct s { }
                  Struct                                    struct s { }
                    struct                                  struct
                    Identifier                              s
                    StructDeclarationList                   
              SingleDeclaration                             x
                DeclarationSpecifier                        x
                  Identifier                                x
      Statement                                             gl_FragColor = vec4(0.1, 0.2, 0.3, 1.0);
        ExpressionStatement                                 gl_FragColor = vec4(0.1, 0.2, 0.3, 1.0);
          Assignment                                        gl_FragColor = vec4(0.1, 0.2, 0.3, 1.0)
            Identifier                                      gl_FragColor
            FunctionCall                                    vec4(0.1, 0.2, 0.3, 1.0)
              vec4                                          vec4
              Number                                        0.1
              Number                                        0.2
              Number                                        0.3
              Number                                        1.0
`;

exports[`GLSL grammar snapshots parses a test program 7`] = `
Program                                                     ⮐ void main() {⮐   int x = 1;⮐   int y = 2;⮐   if (x) if (y) { } else { }⮐ }⮐ 
  FunctionDefinition                                        void main() {⮐   int x = 1;⮐   int y = 2;⮐   if (x) if (y) { } else { }⮐ }
    FunctionPrototype                                       void main()
      QualifiedType                                         void
        TypeSpecifier                                       void
          void                                              void
      Identifier                                            main
    StatementList                                           int x = 1;⮐   int y = 2;⮐   if (x) if (y) { } else { }
      Statement                                             int x = 1;
        DeclarationStatement                                int x = 1;
          LocalDeclaration                                  int x = 1;
            VariableDeclaration                             int x = 1
              QualifiedType                                 int
                TypeSpecifier                               int
                  int                                       int
              SingleDeclaration                             x = 1
                DeclarationSpecifier                        x
                  Identifier                                x
                Number                                      1
      Statement                                             int y = 2;
        DeclarationStatement                                int y = 2;
          LocalDeclaration                                  int y = 2;
            VariableDeclaration                             int y = 2
              QualifiedType                                 int
                TypeSpecifier                               int
                  int                                       int
              SingleDeclaration                             y = 2
                DeclarationSpecifier                        y
                  Identifier                                y
                Number                                      2
      Statement                                             if (x) if (y) { } else { }
        SelectionStatement                                  if (x) if (y) { } else { }
          if                                                if
          Identifier                                        x
          Statement                                         if (y) { } else { }
            SelectionStatement                              if (y) { } else { }
              if                                            if
              Identifier                                    y
              Statement                                     { }
                StatementList                               
              else                                          else
              Statement                                     { }
                StatementList                               
`;

exports[`GLSL grammar snapshots parses a test program 8`] = `
Program                                                     ⮐ void main() {⮐   int x = 1;⮐   /*⮐   int y = 2;⮐   if (x) if (y) { } else { }⮐   */⮐   wat();⮐ }⮐ 
  FunctionDefinition                                        void main() {⮐   int x = 1;⮐   /*⮐   int y = 2;⮐   if (x) if (y) { } else { }⮐   */⮐   wat();⮐ }
    FunctionPrototype                                       void main()
      QualifiedType                                         void
        TypeSpecifier                                       void
          void                                              void
      Identifier                                            main
    StatementList                                           int x = 1;⮐   /*⮐   int y = 2;⮐   if (x) if (y) { } else { }⮐   */⮐   wat();
      Statement                                             int x = 1;
        DeclarationStatement                                int x = 1;
          LocalDeclaration                                  int x = 1;
            VariableDeclaration                             int x = 1
              QualifiedType                                 int
                TypeSpecifier                               int
                  int                                       int
              SingleDeclaration                             x = 1
                DeclarationSpecifier                        x
                  Identifier                                x
                Number                                      1
      Statement                                             wat();
        ExpressionStatement                                 wat();
          FunctionCall                                      wat()
            Identifier                                      wat
`;

exports[`GLSL grammar snapshots parses a test program 9`] = `
Program                                                     ⮐ #pragma import {MeshVertex} from 'use/types'⮐ #pragma import {viewUniforms as view, worldToClip} from 'use/view'⮐ #pragma import {getQuadUV} from 'geometry/quad'⮐ ⮐ #pragma import 'test'⮐ ⮐ #ifdef DEF⮐ #pragma optional⮐ int getInt();⮐ #endif⮐ ⮐ #pragma export⮐ void main();⮐ 
  Preprocessor                                              #pragma import {MeshVertex} from 'use/types'
    pragma                                                  pragma
    import                                                  import
    ImportDeclarationList                                   {MeshVertex}
      ImportDeclaration                                     MeshVertex
        Identifier                                          MeshVertex
    String                                                  'use/types'
    UntilEOL                                                
  Preprocessor                                              #pragma import {viewUniforms as view, worldToClip} from 'use/view'
    pragma                                                  pragma
    import                                                  import
    ImportDeclarationList                                   {viewUniforms as view, worldToClip}
      ImportDeclaration                                     viewUniforms as view
        Identifier                                          viewUniforms
        Identifier                                          view
      ImportDeclaration                                     worldToClip
        Identifier                                          worldToClip
    String                                                  'use/view'
    UntilEOL                                                
  Preprocessor                                              #pragma import {getQuadUV} from 'geometry/quad'
    pragma                                                  pragma
    import                                                  import
    ImportDeclarationList                                   {getQuadUV}
      ImportDeclaration                                     getQuadUV
        Identifier                                          getQuadUV
    String                                                  'geometry/quad'
    UntilEOL                                                
  Preprocessor                                              #pragma import 'test'
    pragma                                                  pragma
    import                                                  import
    String                                                  'test'
    UntilEOL                                                
  Preprocessor                                              #ifdef DEF
    Directive                                               ifdef
      ifdef                                                 ifdef
    UntilEOL                                                 DEF
  Preprocessor                                              #pragma optional
    pragma                                                  pragma
    optional                                                optional
    UntilEOL                                                
  GlobalDeclaration                                         int getInt();
    FunctionPrototype                                       int getInt()
      QualifiedType                                         int
        TypeSpecifier                                       int
          int                                               int
      Identifier                                            getInt
  Preprocessor                                              #endif
    Directive                                               endif
      endif                                                 endif
    UntilEOL                                                
  Preprocessor                                              #pragma export
    pragma                                                  pragma
    export                                                  export
    UntilEOL                                                
  GlobalDeclaration                                         void main();
    FunctionPrototype                                       void main()
      QualifiedType                                         void
        TypeSpecifier                                       void
          void                                              void
      Identifier                                            main
`;

exports[`GLSL grammar snapshots parses a test program 10`] = `
Program                                                     ⮐ MeshVertex getQuad(int vertex) {⮐   vec2 uv = getQuadUV(vertex);⮐   vec4 position = vec4(uv * 2.0 - 1.0, 0.0, 1.0);⮐   vec4 color = vec4(1.0, 0.0, 1.0, 1.0);⮐   return MeshVertex(position, color, uv);⮐ }⮐ 
  FunctionDefinition                                        MeshVertex getQuad(int vertex) {⮐   vec2 uv = getQuadUV(vertex);⮐   vec4 position = vec4(uv * 2.0 - 1.0, 0.0, 1.0);⮐   vec4 color = vec4(1.0, 0.0, 1.0, 1.0);⮐   return MeshVertex(position, color, uv);⮐ }
    FunctionPrototype                                       MeshVertex getQuad(int vertex)
      QualifiedType                                         MeshVertex
        TypeSpecifier                                       MeshVertex
          Identifier                                        MeshVertex
      Identifier                                            getQuad
      ParameterDeclaration                                  int vertex
        TypeSpecifier                                       int
          int                                               int
        Identifier                                          vertex
    StatementList                                           vec2 uv = getQuadUV(vertex);⮐   vec4 position = vec4(uv * 2.0 - 1.0, 0.0, 1.0);⮐   vec4 color = vec4(1.0, 0.0, 1.0, 1.0);⮐   return MeshVertex(position, color, uv);
      Statement                                             vec2 uv = getQuadUV(vertex);
        DeclarationStatement                                vec2 uv = getQuadUV(vertex);
          LocalDeclaration                                  vec2 uv = getQuadUV(vertex);
            VariableDeclaration                             vec2 uv = getQuadUV(vertex)
              QualifiedType                                 vec2
                TypeSpecifier                               vec2
                  vec2                                      vec2
              SingleDeclaration                             uv = getQuadUV(vertex)
                DeclarationSpecifier                        uv
                  Identifier                                uv
                FunctionCall                                getQuadUV(vertex)
                  Identifier                                getQuadUV
                  Identifier                                vertex
      Statement                                             vec4 position = vec4(uv * 2.0 - 1.0, 0.0, 1.0);
        DeclarationStatement                                vec4 position = vec4(uv * 2.0 - 1.0, 0.0, 1.0);
          LocalDeclaration                                  vec4 position = vec4(uv * 2.0 - 1.0, 0.0, 1.0);
            VariableDeclaration                             vec4 position = vec4(uv * 2.0 - 1.0, 0.0, 1.0)
              QualifiedType                                 vec4
                TypeSpecifier                               vec4
                  vec4                                      vec4
              SingleDeclaration                             position = vec4(uv * 2.0 - 1.0, 0.0, 1.0)
                DeclarationSpecifier                        position
                  Identifier                                position
                FunctionCall                                vec4(uv * 2.0 - 1.0, 0.0, 1.0)
                  vec4                                      vec4
                  Binary                                    uv * 2.0 - 1.0
                    Binary                                  uv * 2.0
                      Identifier                            uv
                      Mul                                   *
                      Number                                2.0
                    Sub                                     -
                    Number                                  1.0
                  Number                                    0.0
                  Number                                    1.0
      Statement                                             vec4 color = vec4(1.0, 0.0, 1.0, 1.0);
        DeclarationStatement                                vec4 color = vec4(1.0, 0.0, 1.0, 1.0);
          LocalDeclaration                                  vec4 color = vec4(1.0, 0.0, 1.0, 1.0);
            VariableDeclaration                             vec4 color = vec4(1.0, 0.0, 1.0, 1.0)
              QualifiedType                                 vec4
                TypeSpecifier                               vec4
                  vec4                                      vec4
              SingleDeclaration                             color = vec4(1.0, 0.0, 1.0, 1.0)
                DeclarationSpecifier                        color
                  Identifier                                color
                FunctionCall                                vec4(1.0, 0.0, 1.0, 1.0)
                  vec4                                      vec4
                  Number                                    1.0
                  Number                                    0.0
                  Number                                    1.0
                  Number                                    1.0
      Statement                                             return MeshVertex(position, color, uv);
        JumpStatement                                       return MeshVertex(position, color, uv);
          return                                            return
          FunctionCall                                      MeshVertex(position, color, uv)
            Identifier                                      MeshVertex
            Identifier                                      position
            Identifier                                      color
            Identifier                                      uv
`;

exports[`GLSL grammar snapshots parses a test program 11`] = `
Program                                                     ⮐ #version 450⮐ ⮐ layout(set = 0, binding = 0) uniform ViewUniforms {⮐   mat4 projectionMatrix;⮐   mat4 viewMatrix;⮐   vec4 viewPosition;⮐   vec4 lightPosition;⮐ } view;⮐ ⮐ layout(location = 0) in vec4 position;⮐ layout(location = 1) in vec4 normal;⮐ layout(location = 2) in vec4 color;⮐ layout(location = 3) in vec2 uv;⮐ ⮐ layout(location = 0) out vec4 fragColor;⮐ layout(location = 1) out vec2 fragUV;⮐ ⮐ layout(location = 2) out vec3 fragNormal;⮐ layout(location = 3) out vec3 fragLight;⮐ layout(location = 4) out vec3 fragView;⮐ ⮐ void main() {⮐   gl_Position = view.projectionMatrix * view.viewMatrix * position;⮐ ⮐   fragColor = color;⮐   fragUV = uv;⮐ ⮐   fragNormal = normal.xyz;⮐   fragLight = view.lightPosition.xyz - position.xyz;⮐   fragView = view.viewPosition.xyz - position.xyz;⮐ }⮐ 
  Preprocessor                                              #version 450
    Directive                                               version
      version                                               version
    UntilEOL                                                 450
  GlobalDeclaration                                         layout(set = 0, binding = 0) uniform ViewUniforms {⮐   mat4 projectionMatrix;⮐   mat4 viewMatrix;⮐   vec4 viewPosition;⮐   vec4 lightPosition;⮐ } view;
    QualifiedStructDeclaration                              layout(set = 0, binding = 0) uniform ViewUniforms {⮐   mat4 projectionMatrix;⮐   mat4 viewMatrix;⮐   vec4 viewPosition;⮐   vec4 lightPosition;⮐ } view
      TypeQualifier                                         layout(set = 0, binding = 0) uniform
        LayoutQualifier                                     layout(set = 0, binding = 0)
          layout                                            layout
          LayoutQualifierId                                 set = 0
            PrivateIdentifier                               set
              Identifier                                    set
            Number                                          0
          LayoutQualifierId                                 binding = 0
            PrivateIdentifier                               binding
              Identifier                                    binding
            Number                                          0
        StorageQualifier                                    uniform
          uniform                                           uniform
      Identifier                                            ViewUniforms
      StructDeclarationList                                 mat4 projectionMatrix;⮐   mat4 viewMatrix;⮐   vec4 viewPosition;⮐   vec4 lightPosition;
        StructDeclaration                                   mat4 projectionMatrix;
          TypeSpecifier                                     mat4
            mat4                                            mat4
          StructDeclarationSpecifier                        projectionMatrix
            PrivateIdentifier                               projectionMatrix
              Identifier                                    projectionMatrix
        StructDeclaration                                   mat4 viewMatrix;
          TypeSpecifier                                     mat4
            mat4                                            mat4
          StructDeclarationSpecifier                        viewMatrix
            PrivateIdentifier                               viewMatrix
              Identifier                                    viewMatrix
        StructDeclaration                                   vec4 viewPosition;
          TypeSpecifier                                     vec4
            vec4                                            vec4
          StructDeclarationSpecifier                        viewPosition
            PrivateIdentifier                               viewPosition
              Identifier                                    viewPosition
        StructDeclaration                                   vec4 lightPosition;
          TypeSpecifier                                     vec4
            vec4                                            vec4
          StructDeclarationSpecifier                        lightPosition
            PrivateIdentifier                               lightPosition
              Identifier                                    lightPosition
      DeclarationSpecifier                                  view
        Identifier                                          view
  GlobalDeclaration                                         layout(location = 0) in vec4 position;
    VariableDeclaration                                     layout(location = 0) in vec4 position
      QualifiedType                                         layout(location = 0) in vec4
        TypeQualifier                                       layout(location = 0) in
          LayoutQualifier                                   layout(location = 0)
            layout                                          layout
            LayoutQualifierId                               location = 0
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        0
          StorageQualifier                                  in
            in                                              in
        TypeSpecifier                                       vec4
          vec4                                              vec4
      SingleDeclaration                                     position
        DeclarationSpecifier                                position
          Identifier                                        position
  GlobalDeclaration                                         layout(location = 1) in vec4 normal;
    VariableDeclaration                                     layout(location = 1) in vec4 normal
      QualifiedType                                         layout(location = 1) in vec4
        TypeQualifier                                       layout(location = 1) in
          LayoutQualifier                                   layout(location = 1)
            layout                                          layout
            LayoutQualifierId                               location = 1
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        1
          StorageQualifier                                  in
            in                                              in
        TypeSpecifier                                       vec4
          vec4                                              vec4
      SingleDeclaration                                     normal
        DeclarationSpecifier                                normal
          Identifier                                        normal
  GlobalDeclaration                                         layout(location = 2) in vec4 color;
    VariableDeclaration                                     layout(location = 2) in vec4 color
      QualifiedType                                         layout(location = 2) in vec4
        TypeQualifier                                       layout(location = 2) in
          LayoutQualifier                                   layout(location = 2)
            layout                                          layout
            LayoutQualifierId                               location = 2
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        2
          StorageQualifier                                  in
            in                                              in
        TypeSpecifier                                       vec4
          vec4                                              vec4
      SingleDeclaration                                     color
        DeclarationSpecifier                                color
          Identifier                                        color
  GlobalDeclaration                                         layout(location = 3) in vec2 uv;
    VariableDeclaration                                     layout(location = 3) in vec2 uv
      QualifiedType                                         layout(location = 3) in vec2
        TypeQualifier                                       layout(location = 3) in
          LayoutQualifier                                   layout(location = 3)
            layout                                          layout
            LayoutQualifierId                               location = 3
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        3
          StorageQualifier                                  in
            in                                              in
        TypeSpecifier                                       vec2
          vec2                                              vec2
      SingleDeclaration                                     uv
        DeclarationSpecifier                                uv
          Identifier                                        uv
  GlobalDeclaration                                         layout(location = 0) out vec4 fragColor;
    VariableDeclaration                                     layout(location = 0) out vec4 fragColor
      QualifiedType                                         layout(location = 0) out vec4
        TypeQualifier                                       layout(location = 0) out
          LayoutQualifier                                   layout(location = 0)
            layout                                          layout
            LayoutQualifierId                               location = 0
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        0
          StorageQualifier                                  out
            out                                             out
        TypeSpecifier                                       vec4
          vec4                                              vec4
      SingleDeclaration                                     fragColor
        DeclarationSpecifier                                fragColor
          Identifier                                        fragColor
  GlobalDeclaration                                         layout(location = 1) out vec2 fragUV;
    VariableDeclaration                                     layout(location = 1) out vec2 fragUV
      QualifiedType                                         layout(location = 1) out vec2
        TypeQualifier                                       layout(location = 1) out
          LayoutQualifier                                   layout(location = 1)
            layout                                          layout
            LayoutQualifierId                               location = 1
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        1
          StorageQualifier                                  out
            out                                             out
        TypeSpecifier                                       vec2
          vec2                                              vec2
      SingleDeclaration                                     fragUV
        DeclarationSpecifier                                fragUV
          Identifier                                        fragUV
  GlobalDeclaration                                         layout(location = 2) out vec3 fragNormal;
    VariableDeclaration                                     layout(location = 2) out vec3 fragNormal
      QualifiedType                                         layout(location = 2) out vec3
        TypeQualifier                                       layout(location = 2) out
          LayoutQualifier                                   layout(location = 2)
            layout                                          layout
            LayoutQualifierId                               location = 2
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        2
          StorageQualifier                                  out
            out                                             out
        TypeSpecifier                                       vec3
          vec3                                              vec3
      SingleDeclaration                                     fragNormal
        DeclarationSpecifier                                fragNormal
          Identifier                                        fragNormal
  GlobalDeclaration                                         layout(location = 3) out vec3 fragLight;
    VariableDeclaration                                     layout(location = 3) out vec3 fragLight
      QualifiedType                                         layout(location = 3) out vec3
        TypeQualifier                                       layout(location = 3) out
          LayoutQualifier                                   layout(location = 3)
            layout                                          layout
            LayoutQualifierId                               location = 3
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        3
          StorageQualifier                                  out
            out                                             out
        TypeSpecifier                                       vec3
          vec3                                              vec3
      SingleDeclaration                                     fragLight
        DeclarationSpecifier                                fragLight
          Identifier                                        fragLight
  GlobalDeclaration                                         layout(location = 4) out vec3 fragView;
    VariableDeclaration                                     layout(location = 4) out vec3 fragView
      QualifiedType                                         layout(location = 4) out vec3
        TypeQualifier                                       layout(location = 4) out
          LayoutQualifier                                   layout(location = 4)
            layout                                          layout
            LayoutQualifierId                               location = 4
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        4
          StorageQualifier                                  out
            out                                             out
        TypeSpecifier                                       vec3
          vec3                                              vec3
      SingleDeclaration                                     fragView
        DeclarationSpecifier                                fragView
          Identifier                                        fragView
  FunctionDefinition                                        void main() {⮐   gl_Position = view.projectionMatrix * view.viewMatrix * position;⮐ ⮐   fragColor = color;⮐   fragUV = uv;⮐ ⮐   fragNormal = normal.xyz;⮐   fragLight = view.lightPosition.xyz - position.xyz;⮐   fragView = view.viewPosition.xyz - position.xyz;⮐ }
    FunctionPrototype                                       void main()
      QualifiedType                                         void
        TypeSpecifier                                       void
          void                                              void
      Identifier                                            main
    StatementList                                           gl_Position = view.projectionMatrix * view.viewMatrix * position;⮐ ⮐   fragColor = color;⮐   fragUV = uv;⮐ ⮐   fragNormal = normal.xyz;⮐   fragLight = view.lightPosition.xyz - position.xyz;⮐   fragView = view.viewPosition.xyz - position.xyz;
      Statement                                             gl_Position = view.projectionMatrix * view.viewMatrix * position;
        ExpressionStatement                                 gl_Position = view.projectionMatrix * view.viewMatrix * position;
          Assignment                                        gl_Position = view.projectionMatrix * view.viewMatrix * position
            Identifier                                      gl_Position
            Binary                                          view.projectionMatrix * view.viewMatrix * position
              Binary                                        view.projectionMatrix * view.viewMatrix
                Field                                       view.projectionMatrix
                  Identifier                                view
                  PrivateIdentifier                         projectionMatrix
                    Identifier                              projectionMatrix
                Mul                                         *
                Field                                       view.viewMatrix
                  Identifier                                view
                  PrivateIdentifier                         viewMatrix
                    Identifier                              viewMatrix
              Mul                                           *
              Identifier                                    position
      Statement                                             fragColor = color;
        ExpressionStatement                                 fragColor = color;
          Assignment                                        fragColor = color
            Identifier                                      fragColor
            Identifier                                      color
      Statement                                             fragUV = uv;
        ExpressionStatement                                 fragUV = uv;
          Assignment                                        fragUV = uv
            Identifier                                      fragUV
            Identifier                                      uv
      Statement                                             fragNormal = normal.xyz;
        ExpressionStatement                                 fragNormal = normal.xyz;
          Assignment                                        fragNormal = normal.xyz
            Identifier                                      fragNormal
            Field                                           normal.xyz
              Identifier                                    normal
              PrivateIdentifier                             xyz
                Identifier                                  xyz
      Statement                                             fragLight = view.lightPosition.xyz - position.xyz;
        ExpressionStatement                                 fragLight = view.lightPosition.xyz - position.xyz;
          Assignment                                        fragLight = view.lightPosition.xyz - position.xyz
            Identifier                                      fragLight
            Binary                                          view.lightPosition.xyz - position.xyz
              Field                                         view.lightPosition.xyz
                Field                                       view.lightPosition
                  Identifier                                view
                  PrivateIdentifier                         lightPosition
                    Identifier                              lightPosition
                PrivateIdentifier                           xyz
                  Identifier                                xyz
              Sub                                           -
              Field                                         position.xyz
                Identifier                                  position
                PrivateIdentifier                           xyz
                  Identifier                                xyz
      Statement                                             fragView = view.viewPosition.xyz - position.xyz;
        ExpressionStatement                                 fragView = view.viewPosition.xyz - position.xyz;
          Assignment                                        fragView = view.viewPosition.xyz - position.xyz
            Identifier                                      fragView
            Binary                                          view.viewPosition.xyz - position.xyz
              Field                                         view.viewPosition.xyz
                Field                                       view.viewPosition
                  Identifier                                view
                  PrivateIdentifier                         viewPosition
                    Identifier                              viewPosition
                PrivateIdentifier                           xyz
                  Identifier                                xyz
              Sub                                           -
              Field                                         position.xyz
                Identifier                                  position
                PrivateIdentifier                           xyz
                  Identifier                                xyz
`;

exports[`GLSL grammar snapshots parses a test program 12`] = `
Program                                                     ⮐ #version 450⮐ ⮐ layout(location = 0) in vec4 fragColor;⮐ layout(location = 1) in vec2 fragUV;⮐ ⮐ layout(location = 2) in vec3 fragNormal;⮐ layout(location = 3) in vec3 fragLight;⮐ layout(location = 4) in vec3 fragView;⮐ ⮐ layout(location = 0) out vec4 outColor;⮐ layout(location = 1) out vec4 pickingColor;⮐ ⮐ float PI = 3.141592;⮐ ⮐ float F_DIELECTRIC = 0.04;⮐ ⮐ float getGrid(vec2 uv) {⮐   vec2 xy = abs(fract(uv) - 0.5);⮐   return max(xy.x, xy.y) > 0.45 ? 1.0 : 0.75;⮐ }⮐ ⮐ float saturate(float x) {⮐   return max(x, 0.0);⮐ }⮐ ⮐ float pow5(float x) {⮐   float x2 = x * x;⮐   return x2 * x2 * x;⮐ }⮐ // https://www.shadertoy.com/view/XlKSDR⮐ // D - Normal distribution term⮐ float ndfGGX2(float cosTheta, float alpha) {⮐   float alphaSqr = alpha * alpha;⮐   float denom = cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f;⮐   return alphaSqr / (PI * denom * denom);⮐ }⮐ ⮐ float ndfGGX(float cosTheta, float alpha) {⮐   float oneMinus = 1.0 - cosTheta * cosTheta;⮐   float a = cosTheta * alpha;⮐   float k = alpha / (oneMinus + a * a);⮐   float d = k * k * (1.0 / PI);⮐   return d;⮐ }⮐ ⮐ // F - Schlick approximation of Fresnel⮐ vec3 fresnelSchlick(float cosTheta, vec3 F0) {⮐   float FT = pow5(1.0f - cosTheta);⮐   return F0 + (1.0 - F0) * FT;⮐ }⮐ ⮐ float fresnelSchlick(float cosTheta, float f0, float f90) {⮐   return f0 + (f90 - f0) * pow(1.0 - cosTheta, 5.0);⮐ }⮐ ⮐ float fdBurley(float dotNL, float dotNV, float dotLH, float alpha) {⮐   float f90 = 0.5 + 2.0 * alpha * dotLH * dotLH;⮐   float lightScatter = fresnelSchlick(dotNL, 1.0, f90);⮐   float viewScatter = fresnelSchlick(dotNV, 1.0, f90);⮐   return lightScatter * viewScatter * (1.0 / PI);⮐ }⮐ ⮐ // G - Geometric attenuation term⮐ float G1X(float dotNX, float k) {⮐   return 1.0f / (dotNX * (1.0f - k) + k);⮐ }⮐ ⮐ float smithGGXCorrelated(float dotNL, float dotNV, float alpha) {⮐   float a2 = alpha * alpha;⮐   float GGXL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2);⮐   float GGXV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2);⮐   return 0.5 / (GGXL + GGXV);⮐ }⮐ ⮐ float geometricGGX(float dotNL, float dotNV, float alpha) {⮐   float k = alpha / 2.0f;⮐   return G1X(dotNL, k) * G1X(dotNV, k);⮐ }⮐ ⮐ vec3 PBR(vec3 N, vec3 L, vec3 V, vec3 albedo, float metalness, float roughness) {⮐ ⮐   vec3 diffuseColor = albedo * (1.0 - metalness);⮐   vec3 F0 = mix(vec3(F_DIELECTRIC), albedo, metalness);⮐ ⮐   float alpha = roughness * roughness;⮐   float dotNV = saturate(dot(N, V));⮐ ⮐   float radiance = 3.1415;⮐ ⮐   vec3 H = normalize(V + L);⮐   float dotNL = saturate(dot(N, L));⮐   float dotNH = saturate(dot(N, H));⮐   float dotLH = saturate(dot(L, H));⮐ ⮐   vec3 F = fresnelSchlick(dotLH, F0);⮐   float D = ndfGGX(dotNH, alpha);⮐   float G = smithGGXCorrelated(dotNL, dotNV, alpha);⮐   //float G2 = geometricGGX(dotNL, dotNV, alpha);⮐   //return vec3(abs(G - G2) / 100.0);⮐   ⮐   vec3 Fd = albedo * fdBurley(dotNL, dotNV, dotLH, alpha);⮐   vec3 Fs = F * D * G;⮐ ⮐   vec3 direct = (Fd + Fs) * radiance * dotNL;⮐   return direct;⮐ }⮐ ⮐ void main() {⮐   vec3 N = normalize(fragNormal);⮐   vec3 L = normalize(fragLight);⮐   vec3 V = normalize(fragView);⮐ ⮐   vec3 albedo = vec3(1.0);//fragColor.rgb;⮐   float metalness = 0.2;⮐   float roughness = 0.8;⮐   ⮐   float grid = getGrid(fragUV);⮐   vec3 color = PBR(N, L, V, albedo, metalness, roughness);⮐   ⮐   outColor = vec4(color * grid, fragColor.a);⮐ }⮐ ⮐ 
  Preprocessor                                              #version 450
    Directive                                               version
      version                                               version
    UntilEOL                                                 450
  GlobalDeclaration                                         layout(location = 0) in vec4 fragColor;
    VariableDeclaration                                     layout(location = 0) in vec4 fragColor
      QualifiedType                                         layout(location = 0) in vec4
        TypeQualifier                                       layout(location = 0) in
          LayoutQualifier                                   layout(location = 0)
            layout                                          layout
            LayoutQualifierId                               location = 0
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        0
          StorageQualifier                                  in
            in                                              in
        TypeSpecifier                                       vec4
          vec4                                              vec4
      SingleDeclaration                                     fragColor
        DeclarationSpecifier                                fragColor
          Identifier                                        fragColor
  GlobalDeclaration                                         layout(location = 1) in vec2 fragUV;
    VariableDeclaration                                     layout(location = 1) in vec2 fragUV
      QualifiedType                                         layout(location = 1) in vec2
        TypeQualifier                                       layout(location = 1) in
          LayoutQualifier                                   layout(location = 1)
            layout                                          layout
            LayoutQualifierId                               location = 1
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        1
          StorageQualifier                                  in
            in                                              in
        TypeSpecifier                                       vec2
          vec2                                              vec2
      SingleDeclaration                                     fragUV
        DeclarationSpecifier                                fragUV
          Identifier                                        fragUV
  GlobalDeclaration                                         layout(location = 2) in vec3 fragNormal;
    VariableDeclaration                                     layout(location = 2) in vec3 fragNormal
      QualifiedType                                         layout(location = 2) in vec3
        TypeQualifier                                       layout(location = 2) in
          LayoutQualifier                                   layout(location = 2)
            layout                                          layout
            LayoutQualifierId                               location = 2
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        2
          StorageQualifier                                  in
            in                                              in
        TypeSpecifier                                       vec3
          vec3                                              vec3
      SingleDeclaration                                     fragNormal
        DeclarationSpecifier                                fragNormal
          Identifier                                        fragNormal
  GlobalDeclaration                                         layout(location = 3) in vec3 fragLight;
    VariableDeclaration                                     layout(location = 3) in vec3 fragLight
      QualifiedType                                         layout(location = 3) in vec3
        TypeQualifier                                       layout(location = 3) in
          LayoutQualifier                                   layout(location = 3)
            layout                                          layout
            LayoutQualifierId                               location = 3
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        3
          StorageQualifier                                  in
            in                                              in
        TypeSpecifier                                       vec3
          vec3                                              vec3
      SingleDeclaration                                     fragLight
        DeclarationSpecifier                                fragLight
          Identifier                                        fragLight
  GlobalDeclaration                                         layout(location = 4) in vec3 fragView;
    VariableDeclaration                                     layout(location = 4) in vec3 fragView
      QualifiedType                                         layout(location = 4) in vec3
        TypeQualifier                                       layout(location = 4) in
          LayoutQualifier                                   layout(location = 4)
            layout                                          layout
            LayoutQualifierId                               location = 4
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        4
          StorageQualifier                                  in
            in                                              in
        TypeSpecifier                                       vec3
          vec3                                              vec3
      SingleDeclaration                                     fragView
        DeclarationSpecifier                                fragView
          Identifier                                        fragView
  GlobalDeclaration                                         layout(location = 0) out vec4 outColor;
    VariableDeclaration                                     layout(location = 0) out vec4 outColor
      QualifiedType                                         layout(location = 0) out vec4
        TypeQualifier                                       layout(location = 0) out
          LayoutQualifier                                   layout(location = 0)
            layout                                          layout
            LayoutQualifierId                               location = 0
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        0
          StorageQualifier                                  out
            out                                             out
        TypeSpecifier                                       vec4
          vec4                                              vec4
      SingleDeclaration                                     outColor
        DeclarationSpecifier                                outColor
          Identifier                                        outColor
  GlobalDeclaration                                         layout(location = 1) out vec4 pickingColor;
    VariableDeclaration                                     layout(location = 1) out vec4 pickingColor
      QualifiedType                                         layout(location = 1) out vec4
        TypeQualifier                                       layout(location = 1) out
          LayoutQualifier                                   layout(location = 1)
            layout                                          layout
            LayoutQualifierId                               location = 1
              PrivateIdentifier                             location
                Identifier                                  location
              Number                                        1
          StorageQualifier                                  out
            out                                             out
        TypeSpecifier                                       vec4
          vec4                                              vec4
      SingleDeclaration                                     pickingColor
        DeclarationSpecifier                                pickingColor
          Identifier                                        pickingColor
  GlobalDeclaration                                         float PI = 3.141592;
    VariableDeclaration                                     float PI = 3.141592
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      SingleDeclaration                                     PI = 3.141592
        DeclarationSpecifier                                PI
          Identifier                                        PI
        Number                                              3.141592
  GlobalDeclaration                                         float F_DIELECTRIC = 0.04;
    VariableDeclaration                                     float F_DIELECTRIC = 0.04
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      SingleDeclaration                                     F_DIELECTRIC = 0.04
        DeclarationSpecifier                                F_DIELECTRIC
          Identifier                                        F_DIELECTRIC
        Number                                              0.04
  FunctionDefinition                                        float getGrid(vec2 uv) {⮐   vec2 xy = abs(fract(uv) - 0.5);⮐   return max(xy.x, xy.y) > 0.45 ? 1.0 : 0.75;⮐ }
    FunctionPrototype                                       float getGrid(vec2 uv)
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      Identifier                                            getGrid
      ParameterDeclaration                                  vec2 uv
        TypeSpecifier                                       vec2
          vec2                                              vec2
        Identifier                                          uv
    StatementList                                           vec2 xy = abs(fract(uv) - 0.5);⮐   return max(xy.x, xy.y) > 0.45 ? 1.0 : 0.75;
      Statement                                             vec2 xy = abs(fract(uv) - 0.5);
        DeclarationStatement                                vec2 xy = abs(fract(uv) - 0.5);
          LocalDeclaration                                  vec2 xy = abs(fract(uv) - 0.5);
            VariableDeclaration                             vec2 xy = abs(fract(uv) - 0.5)
              QualifiedType                                 vec2
                TypeSpecifier                               vec2
                  vec2                                      vec2
              SingleDeclaration                             xy = abs(fract(uv) - 0.5)
                DeclarationSpecifier                        xy
                  Identifier                                xy
                FunctionCall                                abs(fract(uv) - 0.5)
                  Identifier                                abs
                  Binary                                    fract(uv) - 0.5
                    FunctionCall                            fract(uv)
                      Identifier                            fract
                      Identifier                            uv
                    Sub                                     -
                    Number                                  0.5
      Statement                                             return max(xy.x, xy.y) > 0.45 ? 1.0 : 0.75;
        JumpStatement                                       return max(xy.x, xy.y) > 0.45 ? 1.0 : 0.75;
          return                                            return
          Conditional                                       max(xy.x, xy.y) > 0.45 ? 1.0 : 0.75
            Binary                                          max(xy.x, xy.y) > 0.45
              FunctionCall                                  max(xy.x, xy.y)
                Identifier                                  max
                Field                                       xy.x
                  Identifier                                xy
                  PrivateIdentifier                         x
                    Identifier                              x
                Field                                       xy.y
                  Identifier                                xy
                  PrivateIdentifier                         y
                    Identifier                              y
              Gt                                            >
              Number                                        0.45
            Number                                          1.0
            Number                                          0.75
  FunctionDefinition                                        float saturate(float x) {⮐   return max(x, 0.0);⮐ }
    FunctionPrototype                                       float saturate(float x)
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      Identifier                                            saturate
      ParameterDeclaration                                  float x
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          x
    StatementList                                           return max(x, 0.0);
      Statement                                             return max(x, 0.0);
        JumpStatement                                       return max(x, 0.0);
          return                                            return
          FunctionCall                                      max(x, 0.0)
            Identifier                                      max
            Identifier                                      x
            Number                                          0.0
  FunctionDefinition                                        float pow5(float x) {⮐   float x2 = x * x;⮐   return x2 * x2 * x;⮐ }
    FunctionPrototype                                       float pow5(float x)
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      Identifier                                            pow5
      ParameterDeclaration                                  float x
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          x
    StatementList                                           float x2 = x * x;⮐   return x2 * x2 * x;
      Statement                                             float x2 = x * x;
        DeclarationStatement                                float x2 = x * x;
          LocalDeclaration                                  float x2 = x * x;
            VariableDeclaration                             float x2 = x * x
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             x2 = x * x
                DeclarationSpecifier                        x2
                  Identifier                                x2
                Binary                                      x * x
                  Identifier                                x
                  Mul                                       *
                  Identifier                                x
      Statement                                             return x2 * x2 * x;
        JumpStatement                                       return x2 * x2 * x;
          return                                            return
          Binary                                            x2 * x2 * x
            Binary                                          x2 * x2
              Identifier                                    x2
              Mul                                           *
              Identifier                                    x2
            Mul                                             *
            Identifier                                      x
  FunctionDefinition                                        float ndfGGX2(float cosTheta, float alpha) {⮐   float alphaSqr = alpha * alpha;⮐   float denom = cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f;⮐   return alphaSqr / (PI * denom * denom);⮐ }
    FunctionPrototype                                       float ndfGGX2(float cosTheta, float alpha)
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      Identifier                                            ndfGGX2
      ParameterDeclaration                                  float cosTheta
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          cosTheta
      ParameterDeclaration                                  float alpha
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          alpha
    StatementList                                           float alphaSqr = alpha * alpha;⮐   float denom = cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f;⮐   return alphaSqr / (PI * denom * denom);
      Statement                                             float alphaSqr = alpha * alpha;
        DeclarationStatement                                float alphaSqr = alpha * alpha;
          LocalDeclaration                                  float alphaSqr = alpha * alpha;
            VariableDeclaration                             float alphaSqr = alpha * alpha
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             alphaSqr = alpha * alpha
                DeclarationSpecifier                        alphaSqr
                  Identifier                                alphaSqr
                Binary                                      alpha * alpha
                  Identifier                                alpha
                  Mul                                       *
                  Identifier                                alpha
      Statement                                             float denom = cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f;
        DeclarationStatement                                float denom = cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f;
          LocalDeclaration                                  float denom = cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f;
            VariableDeclaration                             float denom = cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             denom = cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f
                DeclarationSpecifier                        denom
                  Identifier                                denom
                Binary                                      cosTheta * cosTheta * (alphaSqr - 1.0) + 1.0f
                  Binary                                    cosTheta * cosTheta * (alphaSqr - 1.0)
                    Binary                                  cosTheta * cosTheta
                      Identifier                            cosTheta
                      Mul                                   *
                      Identifier                            cosTheta
                    Mul                                     *
                    Parens                                  (alphaSqr - 1.0)
                      Binary                                alphaSqr - 1.0
                        Identifier                          alphaSqr
                        Sub                                 -
                        Number                              1.0
                  Add                                       +
                  Number                                    1.0f
      Statement                                             return alphaSqr / (PI * denom * denom);
        JumpStatement                                       return alphaSqr / (PI * denom * denom);
          return                                            return
          Binary                                            alphaSqr / (PI * denom * denom)
            Identifier                                      alphaSqr
            Div                                             /
            Parens                                          (PI * denom * denom)
              Binary                                        PI * denom * denom
                Binary                                      PI * denom
                  Identifier                                PI
                  Mul                                       *
                  Identifier                                denom
                Mul                                         *
                Identifier                                  denom
  FunctionDefinition                                        float ndfGGX(float cosTheta, float alpha) {⮐   float oneMinus = 1.0 - cosTheta * cosTheta;⮐   float a = cosTheta * alpha;⮐   float k = alpha / (oneMinus + a * a);⮐   float d = k * k * (1.0 / PI);⮐   return d;⮐ }
    FunctionPrototype                                       float ndfGGX(float cosTheta, float alpha)
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      Identifier                                            ndfGGX
      ParameterDeclaration                                  float cosTheta
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          cosTheta
      ParameterDeclaration                                  float alpha
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          alpha
    StatementList                                           float oneMinus = 1.0 - cosTheta * cosTheta;⮐   float a = cosTheta * alpha;⮐   float k = alpha / (oneMinus + a * a);⮐   float d = k * k * (1.0 / PI);⮐   return d;
      Statement                                             float oneMinus = 1.0 - cosTheta * cosTheta;
        DeclarationStatement                                float oneMinus = 1.0 - cosTheta * cosTheta;
          LocalDeclaration                                  float oneMinus = 1.0 - cosTheta * cosTheta;
            VariableDeclaration                             float oneMinus = 1.0 - cosTheta * cosTheta
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             oneMinus = 1.0 - cosTheta * cosTheta
                DeclarationSpecifier                        oneMinus
                  Identifier                                oneMinus
                Binary                                      1.0 - cosTheta * cosTheta
                  Number                                    1.0
                  Sub                                       -
                  Binary                                    cosTheta * cosTheta
                    Identifier                              cosTheta
                    Mul                                     *
                    Identifier                              cosTheta
      Statement                                             float a = cosTheta * alpha;
        DeclarationStatement                                float a = cosTheta * alpha;
          LocalDeclaration                                  float a = cosTheta * alpha;
            VariableDeclaration                             float a = cosTheta * alpha
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             a = cosTheta * alpha
                DeclarationSpecifier                        a
                  Identifier                                a
                Binary                                      cosTheta * alpha
                  Identifier                                cosTheta
                  Mul                                       *
                  Identifier                                alpha
      Statement                                             float k = alpha / (oneMinus + a * a);
        DeclarationStatement                                float k = alpha / (oneMinus + a * a);
          LocalDeclaration                                  float k = alpha / (oneMinus + a * a);
            VariableDeclaration                             float k = alpha / (oneMinus + a * a)
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             k = alpha / (oneMinus + a * a)
                DeclarationSpecifier                        k
                  Identifier                                k
                Binary                                      alpha / (oneMinus + a * a)
                  Identifier                                alpha
                  Div                                       /
                  Parens                                    (oneMinus + a * a)
                    Binary                                  oneMinus + a * a
                      Identifier                            oneMinus
                      Add                                   +
                      Binary                                a * a
                        Identifier                          a
                        Mul                                 *
                        Identifier                          a
      Statement                                             float d = k * k * (1.0 / PI);
        DeclarationStatement                                float d = k * k * (1.0 / PI);
          LocalDeclaration                                  float d = k * k * (1.0 / PI);
            VariableDeclaration                             float d = k * k * (1.0 / PI)
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             d = k * k * (1.0 / PI)
                DeclarationSpecifier                        d
                  Identifier                                d
                Binary                                      k * k * (1.0 / PI)
                  Binary                                    k * k
                    Identifier                              k
                    Mul                                     *
                    Identifier                              k
                  Mul                                       *
                  Parens                                    (1.0 / PI)
                    Binary                                  1.0 / PI
                      Number                                1.0
                      Div                                   /
                      Identifier                            PI
      Statement                                             return d;
        JumpStatement                                       return d;
          return                                            return
          Identifier                                        d
  FunctionDefinition                                        vec3 fresnelSchlick(float cosTheta, vec3 F0) {⮐   float FT = pow5(1.0f - cosTheta);⮐   return F0 + (1.0 - F0) * FT;⮐ }
    FunctionPrototype                                       vec3 fresnelSchlick(float cosTheta, vec3 F0)
      QualifiedType                                         vec3
        TypeSpecifier                                       vec3
          vec3                                              vec3
      Identifier                                            fresnelSchlick
      ParameterDeclaration                                  float cosTheta
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          cosTheta
      ParameterDeclaration                                  vec3 F0
        TypeSpecifier                                       vec3
          vec3                                              vec3
        Identifier                                          F0
    StatementList                                           float FT = pow5(1.0f - cosTheta);⮐   return F0 + (1.0 - F0) * FT;
      Statement                                             float FT = pow5(1.0f - cosTheta);
        DeclarationStatement                                float FT = pow5(1.0f - cosTheta);
          LocalDeclaration                                  float FT = pow5(1.0f - cosTheta);
            VariableDeclaration                             float FT = pow5(1.0f - cosTheta)
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             FT = pow5(1.0f - cosTheta)
                DeclarationSpecifier                        FT
                  Identifier                                FT
                FunctionCall                                pow5(1.0f - cosTheta)
                  Identifier                                pow5
                  Binary                                    1.0f - cosTheta
                    Number                                  1.0f
                    Sub                                     -
                    Identifier                              cosTheta
      Statement                                             return F0 + (1.0 - F0) * FT;
        JumpStatement                                       return F0 + (1.0 - F0) * FT;
          return                                            return
          Binary                                            F0 + (1.0 - F0) * FT
            Identifier                                      F0
            Add                                             +
            Binary                                          (1.0 - F0) * FT
              Parens                                        (1.0 - F0)
                Binary                                      1.0 - F0
                  Number                                    1.0
                  Sub                                       -
                  Identifier                                F0
              Mul                                           *
              Identifier                                    FT
  FunctionDefinition                                        float fresnelSchlick(float cosTheta, float f0, float f90) {⮐   return f0 + (f90 - f0) * pow(1.0 - cosTheta, 5.0);⮐ }
    FunctionPrototype                                       float fresnelSchlick(float cosTheta, float f0, float f90)
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      Identifier                                            fresnelSchlick
      ParameterDeclaration                                  float cosTheta
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          cosTheta
      ParameterDeclaration                                  float f0
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          f0
      ParameterDeclaration                                  float f90
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          f90
    StatementList                                           return f0 + (f90 - f0) * pow(1.0 - cosTheta, 5.0);
      Statement                                             return f0 + (f90 - f0) * pow(1.0 - cosTheta, 5.0);
        JumpStatement                                       return f0 + (f90 - f0) * pow(1.0 - cosTheta, 5.0);
          return                                            return
          Binary                                            f0 + (f90 - f0) * pow(1.0 - cosTheta, 5.0)
            Identifier                                      f0
            Add                                             +
            Binary                                          (f90 - f0) * pow(1.0 - cosTheta, 5.0)
              Parens                                        (f90 - f0)
                Binary                                      f90 - f0
                  Identifier                                f90
                  Sub                                       -
                  Identifier                                f0
              Mul                                           *
              FunctionCall                                  pow(1.0 - cosTheta, 5.0)
                Identifier                                  pow
                Binary                                      1.0 - cosTheta
                  Number                                    1.0
                  Sub                                       -
                  Identifier                                cosTheta
                Number                                      5.0
  FunctionDefinition                                        float fdBurley(float dotNL, float dotNV, float dotLH, float alpha) {⮐   float f90 = 0.5 + 2.0 * alpha * dotLH * dotLH;⮐   float lightScatter = fresnelSchlick(dotNL, 1.0, f90);⮐   float viewScatter = fresnelSchlick(dotNV, 1.0, f90);⮐   return lightScatter * viewScatter * (1.0 / PI);⮐ }
    FunctionPrototype                                       float fdBurley(float dotNL, float dotNV, float dotLH, float alpha)
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      Identifier                                            fdBurley
      ParameterDeclaration                                  float dotNL
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          dotNL
      ParameterDeclaration                                  float dotNV
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          dotNV
      ParameterDeclaration                                  float dotLH
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          dotLH
      ParameterDeclaration                                  float alpha
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          alpha
    StatementList                                           float f90 = 0.5 + 2.0 * alpha * dotLH * dotLH;⮐   float lightScatter = fresnelSchlick(dotNL, 1.0, f90);⮐   float viewScatter = fresnelSchlick(dotNV, 1.0, f90);⮐   return lightScatter * viewScatter * (1.0 / PI);
      Statement                                             float f90 = 0.5 + 2.0 * alpha * dotLH * dotLH;
        DeclarationStatement                                float f90 = 0.5 + 2.0 * alpha * dotLH * dotLH;
          LocalDeclaration                                  float f90 = 0.5 + 2.0 * alpha * dotLH * dotLH;
            VariableDeclaration                             float f90 = 0.5 + 2.0 * alpha * dotLH * dotLH
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             f90 = 0.5 + 2.0 * alpha * dotLH * dotLH
                DeclarationSpecifier                        f90
                  Identifier                                f90
                Binary                                      0.5 + 2.0 * alpha * dotLH * dotLH
                  Number                                    0.5
                  Add                                       +
                  Binary                                    2.0 * alpha * dotLH * dotLH
                    Binary                                  2.0 * alpha * dotLH
                      Binary                                2.0 * alpha
                        Number                              2.0
                        Mul                                 *
                        Identifier                          alpha
                      Mul                                   *
                      Identifier                            dotLH
                    Mul                                     *
                    Identifier                              dotLH
      Statement                                             float lightScatter = fresnelSchlick(dotNL, 1.0, f90);
        DeclarationStatement                                float lightScatter = fresnelSchlick(dotNL, 1.0, f90);
          LocalDeclaration                                  float lightScatter = fresnelSchlick(dotNL, 1.0, f90);
            VariableDeclaration                             float lightScatter = fresnelSchlick(dotNL, 1.0, f90)
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             lightScatter = fresnelSchlick(dotNL, 1.0, f90)
                DeclarationSpecifier                        lightScatter
                  Identifier                                lightScatter
                FunctionCall                                fresnelSchlick(dotNL, 1.0, f90)
                  Identifier                                fresnelSchlick
                  Identifier                                dotNL
                  Number                                    1.0
                  Identifier                                f90
      Statement                                             float viewScatter = fresnelSchlick(dotNV, 1.0, f90);
        DeclarationStatement                                float viewScatter = fresnelSchlick(dotNV, 1.0, f90);
          LocalDeclaration                                  float viewScatter = fresnelSchlick(dotNV, 1.0, f90);
            VariableDeclaration                             float viewScatter = fresnelSchlick(dotNV, 1.0, f90)
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             viewScatter = fresnelSchlick(dotNV, 1.0, f90)
                DeclarationSpecifier                        viewScatter
                  Identifier                                viewScatter
                FunctionCall                                fresnelSchlick(dotNV, 1.0, f90)
                  Identifier                                fresnelSchlick
                  Identifier                                dotNV
                  Number                                    1.0
                  Identifier                                f90
      Statement                                             return lightScatter * viewScatter * (1.0 / PI);
        JumpStatement                                       return lightScatter * viewScatter * (1.0 / PI);
          return                                            return
          Binary                                            lightScatter * viewScatter * (1.0 / PI)
            Binary                                          lightScatter * viewScatter
              Identifier                                    lightScatter
              Mul                                           *
              Identifier                                    viewScatter
            Mul                                             *
            Parens                                          (1.0 / PI)
              Binary                                        1.0 / PI
                Number                                      1.0
                Div                                         /
                Identifier                                  PI
  FunctionDefinition                                        float G1X(float dotNX, float k) {⮐   return 1.0f / (dotNX * (1.0f - k) + k);⮐ }
    FunctionPrototype                                       float G1X(float dotNX, float k)
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      Identifier                                            G1X
      ParameterDeclaration                                  float dotNX
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          dotNX
      ParameterDeclaration                                  float k
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          k
    StatementList                                           return 1.0f / (dotNX * (1.0f - k) + k);
      Statement                                             return 1.0f / (dotNX * (1.0f - k) + k);
        JumpStatement                                       return 1.0f / (dotNX * (1.0f - k) + k);
          return                                            return
          Binary                                            1.0f / (dotNX * (1.0f - k) + k)
            Number                                          1.0f
            Div                                             /
            Parens                                          (dotNX * (1.0f - k) + k)
              Binary                                        dotNX * (1.0f - k) + k
                Binary                                      dotNX * (1.0f - k)
                  Identifier                                dotNX
                  Mul                                       *
                  Parens                                    (1.0f - k)
                    Binary                                  1.0f - k
                      Number                                1.0f
                      Sub                                   -
                      Identifier                            k
                Add                                         +
                Identifier                                  k
  FunctionDefinition                                        float smithGGXCorrelated(float dotNL, float dotNV, float alpha) {⮐   float a2 = alpha * alpha;⮐   float GGXL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2);⮐   float GGXV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2);⮐   return 0.5 / (GGXL + GGXV);⮐ }
    FunctionPrototype                                       float smithGGXCorrelated(float dotNL, float dotNV, float alpha)
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      Identifier                                            smithGGXCorrelated
      ParameterDeclaration                                  float dotNL
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          dotNL
      ParameterDeclaration                                  float dotNV
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          dotNV
      ParameterDeclaration                                  float alpha
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          alpha
    StatementList                                           float a2 = alpha * alpha;⮐   float GGXL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2);⮐   float GGXV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2);⮐   return 0.5 / (GGXL + GGXV);
      Statement                                             float a2 = alpha * alpha;
        DeclarationStatement                                float a2 = alpha * alpha;
          LocalDeclaration                                  float a2 = alpha * alpha;
            VariableDeclaration                             float a2 = alpha * alpha
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             a2 = alpha * alpha
                DeclarationSpecifier                        a2
                  Identifier                                a2
                Binary                                      alpha * alpha
                  Identifier                                alpha
                  Mul                                       *
                  Identifier                                alpha
      Statement                                             float GGXL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2);
        DeclarationStatement                                float GGXL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2);
          LocalDeclaration                                  float GGXL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2);
            VariableDeclaration                             float GGXL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2)
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             GGXL = dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2)
                DeclarationSpecifier                        GGXL
                  Identifier                                GGXL
                Binary                                      dotNV * sqrt((dotNL - a2 * dotNL) * dotNL + a2)
                  Identifier                                dotNV
                  Mul                                       *
                  FunctionCall                              sqrt((dotNL - a2 * dotNL) * dotNL + a2)
                    Identifier                              sqrt
                    Binary                                  (dotNL - a2 * dotNL) * dotNL + a2
                      Binary                                (dotNL - a2 * dotNL) * dotNL
                        Parens                              (dotNL - a2 * dotNL)
                          Binary                            dotNL - a2 * dotNL
                            Identifier                      dotNL
                            Sub                             -
                            Binary                          a2 * dotNL
                              Identifier                    a2
                              Mul                           *
                              Identifier                    dotNL
                        Mul                                 *
                        Identifier                          dotNL
                      Add                                   +
                      Identifier                            a2
      Statement                                             float GGXV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2);
        DeclarationStatement                                float GGXV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2);
          LocalDeclaration                                  float GGXV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2);
            VariableDeclaration                             float GGXV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2)
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             GGXV = dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2)
                DeclarationSpecifier                        GGXV
                  Identifier                                GGXV
                Binary                                      dotNL * sqrt((dotNV - a2 * dotNV) * dotNV + a2)
                  Identifier                                dotNL
                  Mul                                       *
                  FunctionCall                              sqrt((dotNV - a2 * dotNV) * dotNV + a2)
                    Identifier                              sqrt
                    Binary                                  (dotNV - a2 * dotNV) * dotNV + a2
                      Binary                                (dotNV - a2 * dotNV) * dotNV
                        Parens                              (dotNV - a2 * dotNV)
                          Binary                            dotNV - a2 * dotNV
                            Identifier                      dotNV
                            Sub                             -
                            Binary                          a2 * dotNV
                              Identifier                    a2
                              Mul                           *
                              Identifier                    dotNV
                        Mul                                 *
                        Identifier                          dotNV
                      Add                                   +
                      Identifier                            a2
      Statement                                             return 0.5 / (GGXL + GGXV);
        JumpStatement                                       return 0.5 / (GGXL + GGXV);
          return                                            return
          Binary                                            0.5 / (GGXL + GGXV)
            Number                                          0.5
            Div                                             /
            Parens                                          (GGXL + GGXV)
              Binary                                        GGXL + GGXV
                Identifier                                  GGXL
                Add                                         +
                Identifier                                  GGXV
  FunctionDefinition                                        float geometricGGX(float dotNL, float dotNV, float alpha) {⮐   float k = alpha / 2.0f;⮐   return G1X(dotNL, k) * G1X(dotNV, k);⮐ }
    FunctionPrototype                                       float geometricGGX(float dotNL, float dotNV, float alpha)
      QualifiedType                                         float
        TypeSpecifier                                       float
          float                                             float
      Identifier                                            geometricGGX
      ParameterDeclaration                                  float dotNL
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          dotNL
      ParameterDeclaration                                  float dotNV
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          dotNV
      ParameterDeclaration                                  float alpha
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          alpha
    StatementList                                           float k = alpha / 2.0f;⮐   return G1X(dotNL, k) * G1X(dotNV, k);
      Statement                                             float k = alpha / 2.0f;
        DeclarationStatement                                float k = alpha / 2.0f;
          LocalDeclaration                                  float k = alpha / 2.0f;
            VariableDeclaration                             float k = alpha / 2.0f
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             k = alpha / 2.0f
                DeclarationSpecifier                        k
                  Identifier                                k
                Binary                                      alpha / 2.0f
                  Identifier                                alpha
                  Div                                       /
                  Number                                    2.0f
      Statement                                             return G1X(dotNL, k) * G1X(dotNV, k);
        JumpStatement                                       return G1X(dotNL, k) * G1X(dotNV, k);
          return                                            return
          Binary                                            G1X(dotNL, k) * G1X(dotNV, k)
            FunctionCall                                    G1X(dotNL, k)
              Identifier                                    G1X
              Identifier                                    dotNL
              Identifier                                    k
            Mul                                             *
            FunctionCall                                    G1X(dotNV, k)
              Identifier                                    G1X
              Identifier                                    dotNV
              Identifier                                    k
  FunctionDefinition                                        vec3 PBR(vec3 N, vec3 L, vec3 V, vec3 albedo, float metalness, float roughness) {⮐ ⮐   vec3 diffuseColor = albedo * (1.0 - metalness);⮐   vec3 F0 = mix(vec3(F_DIELECTRIC), albedo, metalness);⮐ ⮐   float alpha = roughness * roughness;⮐   float dotNV = saturate(dot(N, V));⮐ ⮐   float radiance = 3.1415;⮐ ⮐   vec3 H = normalize(V + L);⮐   float dotNL = saturate(dot(N, L));⮐   float dotNH = saturate(dot(N, H));⮐   float dotLH = saturate(dot(L, H));⮐ ⮐   vec3 F = fresnelSchlick(dotLH, F0);⮐   float D = ndfGGX(dotNH, alpha);⮐   float G = smithGGXCorrelated(dotNL, dotNV, alpha);⮐   //float G2 = geometricGGX(dotNL, dotNV, alpha);⮐   //return vec3(abs(G - G2) / 100.0);⮐   ⮐   vec3 Fd = albedo * fdBurley(dotNL, dotNV, dotLH, alpha);⮐   vec3 Fs = F * D * G;⮐ ⮐   vec3 direct = (Fd + Fs) * radiance * dotNL;⮐   return direct;⮐ }
    FunctionPrototype                                       vec3 PBR(vec3 N, vec3 L, vec3 V, vec3 albedo, float metalness, float roughness)
      QualifiedType                                         vec3
        TypeSpecifier                                       vec3
          vec3                                              vec3
      Identifier                                            PBR
      ParameterDeclaration                                  vec3 N
        TypeSpecifier                                       vec3
          vec3                                              vec3
        Identifier                                          N
      ParameterDeclaration                                  vec3 L
        TypeSpecifier                                       vec3
          vec3                                              vec3
        Identifier                                          L
      ParameterDeclaration                                  vec3 V
        TypeSpecifier                                       vec3
          vec3                                              vec3
        Identifier                                          V
      ParameterDeclaration                                  vec3 albedo
        TypeSpecifier                                       vec3
          vec3                                              vec3
        Identifier                                          albedo
      ParameterDeclaration                                  float metalness
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          metalness
      ParameterDeclaration                                  float roughness
        TypeSpecifier                                       float
          float                                             float
        Identifier                                          roughness
    StatementList                                           vec3 diffuseColor = albedo * (1.0 - metalness);⮐   vec3 F0 = mix(vec3(F_DIELECTRIC), albedo, metalness);⮐ ⮐   float alpha = roughness * roughness;⮐   float dotNV = saturate(dot(N, V));⮐ ⮐   float radiance = 3.1415;⮐ ⮐   vec3 H = normalize(V + L);⮐   float dotNL = saturate(dot(N, L));⮐   float dotNH = saturate(dot(N, H));⮐   float dotLH = saturate(dot(L, H));⮐ ⮐   vec3 F = fresnelSchlick(dotLH, F0);⮐   float D = ndfGGX(dotNH, alpha);⮐   float G = smithGGXCorrelated(dotNL, dotNV, alpha);⮐   //float G2 = geometricGGX(dotNL, dotNV, alpha);⮐   //return vec3(abs(G - G2) / 100.0);⮐   ⮐   vec3 Fd = albedo * fdBurley(dotNL, dotNV, dotLH, alpha);⮐   vec3 Fs = F * D * G;⮐ ⮐   vec3 direct = (Fd + Fs) * radiance * dotNL;⮐   return direct;
      Statement                                             vec3 diffuseColor = albedo * (1.0 - metalness);
        DeclarationStatement                                vec3 diffuseColor = albedo * (1.0 - metalness);
          LocalDeclaration                                  vec3 diffuseColor = albedo * (1.0 - metalness);
            VariableDeclaration                             vec3 diffuseColor = albedo * (1.0 - metalness)
              QualifiedType                                 vec3
                TypeSpecifier                               vec3
                  vec3                                      vec3
              SingleDeclaration                             diffuseColor = albedo * (1.0 - metalness)
                DeclarationSpecifier                        diffuseColor
                  Identifier                                diffuseColor
                Binary                                      albedo * (1.0 - metalness)
                  Identifier                                albedo
                  Mul                                       *
                  Parens                                    (1.0 - metalness)
                    Binary                                  1.0 - metalness
                      Number                                1.0
                      Sub                                   -
                      Identifier                            metalness
      Statement                                             vec3 F0 = mix(vec3(F_DIELECTRIC), albedo, metalness);
        DeclarationStatement                                vec3 F0 = mix(vec3(F_DIELECTRIC), albedo, metalness);
          LocalDeclaration                                  vec3 F0 = mix(vec3(F_DIELECTRIC), albedo, metalness);
            VariableDeclaration                             vec3 F0 = mix(vec3(F_DIELECTRIC), albedo, metalness)
              QualifiedType                                 vec3
                TypeSpecifier                               vec3
                  vec3                                      vec3
              SingleDeclaration                             F0 = mix(vec3(F_DIELECTRIC), albedo, metalness)
                DeclarationSpecifier                        F0
                  Identifier                                F0
                FunctionCall                                mix(vec3(F_DIELECTRIC), albedo, metalness)
                  Identifier                                mix
                  FunctionCall                              vec3(F_DIELECTRIC)
                    vec3                                    vec3
                    Identifier                              F_DIELECTRIC
                  Identifier                                albedo
                  Identifier                                metalness
      Statement                                             float alpha = roughness * roughness;
        DeclarationStatement                                float alpha = roughness * roughness;
          LocalDeclaration                                  float alpha = roughness * roughness;
            VariableDeclaration                             float alpha = roughness * roughness
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             alpha = roughness * roughness
                DeclarationSpecifier                        alpha
                  Identifier                                alpha
                Binary                                      roughness * roughness
                  Identifier                                roughness
                  Mul                                       *
                  Identifier                                roughness
      Statement                                             float dotNV = saturate(dot(N, V));
        DeclarationStatement                                float dotNV = saturate(dot(N, V));
          LocalDeclaration                                  float dotNV = saturate(dot(N, V));
            VariableDeclaration                             float dotNV = saturate(dot(N, V))
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             dotNV = saturate(dot(N, V))
                DeclarationSpecifier                        dotNV
                  Identifier                                dotNV
                FunctionCall                                saturate(dot(N, V))
                  Identifier                                saturate
                  FunctionCall                              dot(N, V)
                    Identifier                              dot
                    Identifier                              N
                    Identifier                              V
      Statement                                             float radiance = 3.1415;
        DeclarationStatement                                float radiance = 3.1415;
          LocalDeclaration                                  float radiance = 3.1415;
            VariableDeclaration                             float radiance = 3.1415
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             radiance = 3.1415
                DeclarationSpecifier                        radiance
                  Identifier                                radiance
                Number                                      3.1415
      Statement                                             vec3 H = normalize(V + L);
        DeclarationStatement                                vec3 H = normalize(V + L);
          LocalDeclaration                                  vec3 H = normalize(V + L);
            VariableDeclaration                             vec3 H = normalize(V + L)
              QualifiedType                                 vec3
                TypeSpecifier                               vec3
                  vec3                                      vec3
              SingleDeclaration                             H = normalize(V + L)
                DeclarationSpecifier                        H
                  Identifier                                H
                FunctionCall                                normalize(V + L)
                  Identifier                                normalize
                  Binary                                    V + L
                    Identifier                              V
                    Add                                     +
                    Identifier                              L
      Statement                                             float dotNL = saturate(dot(N, L));
        DeclarationStatement                                float dotNL = saturate(dot(N, L));
          LocalDeclaration                                  float dotNL = saturate(dot(N, L));
            VariableDeclaration                             float dotNL = saturate(dot(N, L))
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             dotNL = saturate(dot(N, L))
                DeclarationSpecifier                        dotNL
                  Identifier                                dotNL
                FunctionCall                                saturate(dot(N, L))
                  Identifier                                saturate
                  FunctionCall                              dot(N, L)
                    Identifier                              dot
                    Identifier                              N
                    Identifier                              L
      Statement                                             float dotNH = saturate(dot(N, H));
        DeclarationStatement                                float dotNH = saturate(dot(N, H));
          LocalDeclaration                                  float dotNH = saturate(dot(N, H));
            VariableDeclaration                             float dotNH = saturate(dot(N, H))
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             dotNH = saturate(dot(N, H))
                DeclarationSpecifier                        dotNH
                  Identifier                                dotNH
                FunctionCall                                saturate(dot(N, H))
                  Identifier                                saturate
                  FunctionCall                              dot(N, H)
                    Identifier                              dot
                    Identifier                              N
                    Identifier                              H
      Statement                                             float dotLH = saturate(dot(L, H));
        DeclarationStatement                                float dotLH = saturate(dot(L, H));
          LocalDeclaration                                  float dotLH = saturate(dot(L, H));
            VariableDeclaration                             float dotLH = saturate(dot(L, H))
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             dotLH = saturate(dot(L, H))
                DeclarationSpecifier                        dotLH
                  Identifier                                dotLH
                FunctionCall                                saturate(dot(L, H))
                  Identifier                                saturate
                  FunctionCall                              dot(L, H)
                    Identifier                              dot
                    Identifier                              L
                    Identifier                              H
      Statement                                             vec3 F = fresnelSchlick(dotLH, F0);
        DeclarationStatement                                vec3 F = fresnelSchlick(dotLH, F0);
          LocalDeclaration                                  vec3 F = fresnelSchlick(dotLH, F0);
            VariableDeclaration                             vec3 F = fresnelSchlick(dotLH, F0)
              QualifiedType                                 vec3
                TypeSpecifier                               vec3
                  vec3                                      vec3
              SingleDeclaration                             F = fresnelSchlick(dotLH, F0)
                DeclarationSpecifier                        F
                  Identifier                                F
                FunctionCall                                fresnelSchlick(dotLH, F0)
                  Identifier                                fresnelSchlick
                  Identifier                                dotLH
                  Identifier                                F0
      Statement                                             float D = ndfGGX(dotNH, alpha);
        DeclarationStatement                                float D = ndfGGX(dotNH, alpha);
          LocalDeclaration                                  float D = ndfGGX(dotNH, alpha);
            VariableDeclaration                             float D = ndfGGX(dotNH, alpha)
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             D = ndfGGX(dotNH, alpha)
                DeclarationSpecifier                        D
                  Identifier                                D
                FunctionCall                                ndfGGX(dotNH, alpha)
                  Identifier                                ndfGGX
                  Identifier                                dotNH
                  Identifier                                alpha
      Statement                                             float G = smithGGXCorrelated(dotNL, dotNV, alpha);
        DeclarationStatement                                float G = smithGGXCorrelated(dotNL, dotNV, alpha);
          LocalDeclaration                                  float G = smithGGXCorrelated(dotNL, dotNV, alpha);
            VariableDeclaration                             float G = smithGGXCorrelated(dotNL, dotNV, alpha)
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             G = smithGGXCorrelated(dotNL, dotNV, alpha)
                DeclarationSpecifier                        G
                  Identifier                                G
                FunctionCall                                smithGGXCorrelated(dotNL, dotNV, alpha)
                  Identifier                                smithGGXCorrelated
                  Identifier                                dotNL
                  Identifier                                dotNV
                  Identifier                                alpha
      Statement                                             vec3 Fd = albedo * fdBurley(dotNL, dotNV, dotLH, alpha);
        DeclarationStatement                                vec3 Fd = albedo * fdBurley(dotNL, dotNV, dotLH, alpha);
          LocalDeclaration                                  vec3 Fd = albedo * fdBurley(dotNL, dotNV, dotLH, alpha);
            VariableDeclaration                             vec3 Fd = albedo * fdBurley(dotNL, dotNV, dotLH, alpha)
              QualifiedType                                 vec3
                TypeSpecifier                               vec3
                  vec3                                      vec3
              SingleDeclaration                             Fd = albedo * fdBurley(dotNL, dotNV, dotLH, alpha)
                DeclarationSpecifier                        Fd
                  Identifier                                Fd
                Binary                                      albedo * fdBurley(dotNL, dotNV, dotLH, alpha)
                  Identifier                                albedo
                  Mul                                       *
                  FunctionCall                              fdBurley(dotNL, dotNV, dotLH, alpha)
                    Identifier                              fdBurley
                    Identifier                              dotNL
                    Identifier                              dotNV
                    Identifier                              dotLH
                    Identifier                              alpha
      Statement                                             vec3 Fs = F * D * G;
        DeclarationStatement                                vec3 Fs = F * D * G;
          LocalDeclaration                                  vec3 Fs = F * D * G;
            VariableDeclaration                             vec3 Fs = F * D * G
              QualifiedType                                 vec3
                TypeSpecifier                               vec3
                  vec3                                      vec3
              SingleDeclaration                             Fs = F * D * G
                DeclarationSpecifier                        Fs
                  Identifier                                Fs
                Binary                                      F * D * G
                  Binary                                    F * D
                    Identifier                              F
                    Mul                                     *
                    Identifier                              D
                  Mul                                       *
                  Identifier                                G
      Statement                                             vec3 direct = (Fd + Fs) * radiance * dotNL;
        DeclarationStatement                                vec3 direct = (Fd + Fs) * radiance * dotNL;
          LocalDeclaration                                  vec3 direct = (Fd + Fs) * radiance * dotNL;
            VariableDeclaration                             vec3 direct = (Fd + Fs) * radiance * dotNL
              QualifiedType                                 vec3
                TypeSpecifier                               vec3
                  vec3                                      vec3
              SingleDeclaration                             direct = (Fd + Fs) * radiance * dotNL
                DeclarationSpecifier                        direct
                  Identifier                                direct
                Binary                                      (Fd + Fs) * radiance * dotNL
                  Binary                                    (Fd + Fs) * radiance
                    Parens                                  (Fd + Fs)
                      Binary                                Fd + Fs
                        Identifier                          Fd
                        Add                                 +
                        Identifier                          Fs
                    Mul                                     *
                    Identifier                              radiance
                  Mul                                       *
                  Identifier                                dotNL
      Statement                                             return direct;
        JumpStatement                                       return direct;
          return                                            return
          Identifier                                        direct
  FunctionDefinition                                        void main() {⮐   vec3 N = normalize(fragNormal);⮐   vec3 L = normalize(fragLight);⮐   vec3 V = normalize(fragView);⮐ ⮐   vec3 albedo = vec3(1.0);//fragColor.rgb;⮐   float metalness = 0.2;⮐   float roughness = 0.8;⮐   ⮐   float grid = getGrid(fragUV);⮐   vec3 color = PBR(N, L, V, albedo, metalness, roughness);⮐   ⮐   outColor = vec4(color * grid, fragColor.a);⮐ }
    FunctionPrototype                                       void main()
      QualifiedType                                         void
        TypeSpecifier                                       void
          void                                              void
      Identifier                                            main
    StatementList                                           vec3 N = normalize(fragNormal);⮐   vec3 L = normalize(fragLight);⮐   vec3 V = normalize(fragView);⮐ ⮐   vec3 albedo = vec3(1.0);//fragColor.rgb;⮐   float metalness = 0.2;⮐   float roughness = 0.8;⮐   ⮐   float grid = getGrid(fragUV);⮐   vec3 color = PBR(N, L, V, albedo, metalness, roughness);⮐   ⮐   outColor = vec4(color * grid, fragColor.a);
      Statement                                             vec3 N = normalize(fragNormal);
        DeclarationStatement                                vec3 N = normalize(fragNormal);
          LocalDeclaration                                  vec3 N = normalize(fragNormal);
            VariableDeclaration                             vec3 N = normalize(fragNormal)
              QualifiedType                                 vec3
                TypeSpecifier                               vec3
                  vec3                                      vec3
              SingleDeclaration                             N = normalize(fragNormal)
                DeclarationSpecifier                        N
                  Identifier                                N
                FunctionCall                                normalize(fragNormal)
                  Identifier                                normalize
                  Identifier                                fragNormal
      Statement                                             vec3 L = normalize(fragLight);
        DeclarationStatement                                vec3 L = normalize(fragLight);
          LocalDeclaration                                  vec3 L = normalize(fragLight);
            VariableDeclaration                             vec3 L = normalize(fragLight)
              QualifiedType                                 vec3
                TypeSpecifier                               vec3
                  vec3                                      vec3
              SingleDeclaration                             L = normalize(fragLight)
                DeclarationSpecifier                        L
                  Identifier                                L
                FunctionCall                                normalize(fragLight)
                  Identifier                                normalize
                  Identifier                                fragLight
      Statement                                             vec3 V = normalize(fragView);
        DeclarationStatement                                vec3 V = normalize(fragView);
          LocalDeclaration                                  vec3 V = normalize(fragView);
            VariableDeclaration                             vec3 V = normalize(fragView)
              QualifiedType                                 vec3
                TypeSpecifier                               vec3
                  vec3                                      vec3
              SingleDeclaration                             V = normalize(fragView)
                DeclarationSpecifier                        V
                  Identifier                                V
                FunctionCall                                normalize(fragView)
                  Identifier                                normalize
                  Identifier                                fragView
      Statement                                             vec3 albedo = vec3(1.0);
        DeclarationStatement                                vec3 albedo = vec3(1.0);
          LocalDeclaration                                  vec3 albedo = vec3(1.0);
            VariableDeclaration                             vec3 albedo = vec3(1.0)
              QualifiedType                                 vec3
                TypeSpecifier                               vec3
                  vec3                                      vec3
              SingleDeclaration                             albedo = vec3(1.0)
                DeclarationSpecifier                        albedo
                  Identifier                                albedo
                FunctionCall                                vec3(1.0)
                  vec3                                      vec3
                  Number                                    1.0
      Statement                                             float metalness = 0.2;
        DeclarationStatement                                float metalness = 0.2;
          LocalDeclaration                                  float metalness = 0.2;
            VariableDeclaration                             float metalness = 0.2
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             metalness = 0.2
                DeclarationSpecifier                        metalness
                  Identifier                                metalness
                Number                                      0.2
      Statement                                             float roughness = 0.8;
        DeclarationStatement                                float roughness = 0.8;
          LocalDeclaration                                  float roughness = 0.8;
            VariableDeclaration                             float roughness = 0.8
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             roughness = 0.8
                DeclarationSpecifier                        roughness
                  Identifier                                roughness
                Number                                      0.8
      Statement                                             float grid = getGrid(fragUV);
        DeclarationStatement                                float grid = getGrid(fragUV);
          LocalDeclaration                                  float grid = getGrid(fragUV);
            VariableDeclaration                             float grid = getGrid(fragUV)
              QualifiedType                                 float
                TypeSpecifier                               float
                  float                                     float
              SingleDeclaration                             grid = getGrid(fragUV)
                DeclarationSpecifier                        grid
                  Identifier                                grid
                FunctionCall                                getGrid(fragUV)
                  Identifier                                getGrid
                  Identifier                                fragUV
      Statement                                             vec3 color = PBR(N, L, V, albedo, metalness, roughness);
        DeclarationStatement                                vec3 color = PBR(N, L, V, albedo, metalness, roughness);
          LocalDeclaration                                  vec3 color = PBR(N, L, V, albedo, metalness, roughness);
            VariableDeclaration                             vec3 color = PBR(N, L, V, albedo, metalness, roughness)
              QualifiedType                                 vec3
                TypeSpecifier                               vec3
                  vec3                                      vec3
              SingleDeclaration                             color = PBR(N, L, V, albedo, metalness, roughness)
                DeclarationSpecifier                        color
                  Identifier                                color
                FunctionCall                                PBR(N, L, V, albedo, metalness, roughness)
                  Identifier                                PBR
                  Identifier                                N
                  Identifier                                L
                  Identifier                                V
                  Identifier                                albedo
                  Identifier                                metalness
                  Identifier                                roughness
      Statement                                             outColor = vec4(color * grid, fragColor.a);
        ExpressionStatement                                 outColor = vec4(color * grid, fragColor.a);
          Assignment                                        outColor = vec4(color * grid, fragColor.a)
            Identifier                                      outColor
            FunctionCall                                    vec4(color * grid, fragColor.a)
              vec4                                          vec4
              Binary                                        color * grid
                Identifier                                  color
                Mul                                         *
                Identifier                                  grid
              Field                                         fragColor.a
                Identifier                                  fragColor
                PrivateIdentifier                           a
                  Identifier                                a
`;
