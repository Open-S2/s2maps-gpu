import { linkCode, linkModule, linkBundle } from './glsl/link';
import { loadModule } from './glsl/shader';

const trim = (s: string) => s.replace(/(^\s+|\s+$)/g, '');

describe("example linking", () => {

  it("links two GLSL shaders from source code using an import", () => {
    
    const color = trim(`
#pragma global
uniform vec4 color;

#pragma export
vec4 getColor() {
  return color;
}`);
    
    const main = trim(`
#pragma import { getColor } from 'color';

void main() {
  gl_FragColor = getColor();
}
`);
    
    const linked = linkCode(main, {color});
    expect(linked).toMatchSnapshot();
    
  });

  it("links two GLSL shaders from bundle using an import", () => {
    
    const color = trim(`
#pragma global
uniform vec4 color;

#pragma export
vec4 getColor() {
  return color;
}`);
    
    const main = trim(`
#pragma import { getColor } from 'path/to/getColor';

void main() {
  gl_FragColor = getColor();
}
`);

    // import main from 'path/to/main.glsl'
    // generated by @use-gpu/glsl-loader
    const bundle = {
      module: loadModule(main, 'main'),
      libs: {
        'path/to/getColor': {
          module: loadModule(color, 'getColor'),
          libs: {},
        }
      }
    };

    const linked = linkBundle(bundle);
    expect(linked).toMatchSnapshot();
    
  });
  
  it("links two GLSL shaders from source code using a prototype", () => {
    
    const getColor = trim(`
#pragma global
uniform vec4 color;

#pragma export
vec4 getColor() {
  return color;
}`);
    
    const main = trim(`
vec4 getColor();

void main() {
  gl_FragColor = getColor();
}`);

    const linked = linkCode(main, {}, {getColor});
    expect(linked).toMatchSnapshot();
  });
  
  
  it("links two GLSL shaders as modules using a prototype", () => {
    
    const getColor = loadModule(trim(`
#pragma global
uniform vec4 color;

#pragma export
vec4 getColor() {
  return color;
}`), 'getColor');
    
    const main = loadModule(trim(`
vec4 getColor();

void main() {
  gl_FragColor = getColor();
}`), 'main');

    const linked = linkModule(main, {}, {getColor});
    expect(linked).toMatchSnapshot();
  });

  it("readme example", () => {
    
    const color = trim(`
#pragma export
vec4 getColor() {
  return vec4(used(), 0.5, 0.0, 1.0);
}

float used() {
  return 1.0;
}

void unused() {
  // ...
}`);
    
    const main = trim(`
#pragma import { getColor } from 'path/to/color'

void main() {
  gl_FragColor = getColor();
}
`);

    // import main from 'path/to/main.glsl'
    // generated by @use-gpu/glsl-loader
    const bundle = {
      module: loadModule(main, 'main'),
      libs: {
        'path/to/color': {
          module: loadModule(color, 'color'),
        }
      }
    };

    const linked = linkBundle(bundle);
    expect(linked).toMatchSnapshot();
  });
});