// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WGSL grammar snapshots parses a test program 1`] = `
Program                                                     ⮐ var foo: f32 = 1.0;⮐ 
  LocalDeclaration                                          ⮐ var foo: f32 = 1.0;
    GlobalVariableDeclaration                               ⮐ var foo: f32 = 1.0
      AttributeList                                         
      GlobalVariable                                        var foo: f32
        Keyword                                             var
        VariableIdentifier                                  foo: f32
          Identifier                                        foo
          TypeDeclaration                                   f32
            Type                                            f32
      Assign                                                =
      Value                                                 1.0
        FloatLiteral                                        1.0
`;

exports[`WGSL grammar snapshots parses a test program 2`] = `
Program                                                     ⮐ const WAT = true;⮐ 
  LocalDeclaration                                          ⮐ const WAT = true;
    GlobalConstantDeclaration                               ⮐ const WAT = true
      AttributeList                                         
      Keyword                                               const
      VariableIdentifier                                    WAT
        Identifier                                          WAT
      Assign                                                =
      Value                                                 true
        Boolean                                             true
`;

exports[`WGSL grammar snapshots parses a test program 3`] = `
Program                                                     ⮐ struct light {⮐   intensity: f32,⮐   position: vec3<f32>,⮐ };⮐ 
  LocalDeclaration                                          ⮐ struct light {⮐   intensity: f32,⮐   position: vec3<f32>,⮐ }
    StructDeclaration                                       ⮐ struct light {⮐   intensity: f32,⮐   position: vec3<f32>,⮐ }
      AttributeList                                         
      Keyword                                               struct
      Identifier                                            light
      StructBodyDeclaration                                 {⮐   intensity: f32,⮐   position: vec3<f32>,⮐ }
        StructMember                                        ⮐   intensity: f32
          AttributeList                                     
          PrivateIdentifier                                 intensity
            Identifier                                      intensity
          TypeDeclaration                                   f32
            Type                                            f32
        StructMember                                        ⮐   position: vec3<f32>
          AttributeList                                     
          PrivateIdentifier                                 position
            Identifier                                      position
          TypeDeclaration                                   vec3<f32>
            Type                                            vec3
            TypeDeclaration                                 f32
              Type                                          f32
`;

exports[`WGSL grammar snapshots parses a test program 4`] = `
Program                                                     ⮐ fn main() {}⮐ 
  LocalDeclaration                                          ⮐ fn main() {}
    FunctionDeclaration                                     ⮐ fn main() {}
      AttributeList                                         
      FunctionHeader                                        fn main()
        Keyword                                             fn
        Identifier                                          main
        ParamList                                           
        ReturnType                                          
      CompoundStatement                                     {}
`;

exports[`WGSL grammar snapshots parses a test program 5`] = `
Program                                                     ⮐ @link fn main() {}⮐ 
  LocalDeclaration                                          @link fn main() {}
    FunctionDeclaration                                     @link fn main() {}
      AttributeList                                         @link
        Attribute                                           @link
          Identifier                                        link
      FunctionHeader                                        fn main()
        Keyword                                             fn
        Identifier                                          main
        ParamList                                           
        ReturnType                                          
      CompoundStatement                                     {}
`;

exports[`WGSL grammar snapshots parses a test program 6`] = `
Program                                                     ⮐ struct A {⮐   @location(0) x: f32,⮐   @location(1) y: f32,⮐ }⮐ ⮐ @fragment⮐ fn fragShader(in1: A, @location(2) in2: f32) -> @location(0) vec4<f32> {⮐ }⮐ 
  LocalDeclaration                                          ⮐ struct A {⮐   @location(0) x: f32,⮐   @location(1) y: f32,⮐ }
    StructDeclaration                                       ⮐ struct A {⮐   @location(0) x: f32,⮐   @location(1) y: f32,⮐ }
      AttributeList                                         
      Keyword                                               struct
      Identifier                                            A
      StructBodyDeclaration                                 {⮐   @location(0) x: f32,⮐   @location(1) y: f32,⮐ }
        StructMember                                        @location(0) x: f32
          AttributeList                                     @location(0)
            Attribute                                       @location(0)
              Identifier                                    location
              IntLiteral                                    0
          PrivateIdentifier                                 x
            Identifier                                      x
          TypeDeclaration                                   f32
            Type                                            f32
        StructMember                                        @location(1) y: f32
          AttributeList                                     @location(1)
            Attribute                                       @location(1)
              Identifier                                    location
              IntLiteral                                    1
          PrivateIdentifier                                 y
            Identifier                                      y
          TypeDeclaration                                   f32
            Type                                            f32
  LocalDeclaration                                          @fragment⮐ fn fragShader(in1: A, @location(2) in2: f32) -> @location(0) vec4<f32> {⮐ }
    FunctionDeclaration                                     @fragment⮐ fn fragShader(in1: A, @location(2) in2: f32) -> @location(0) vec4<f32> {⮐ }
      AttributeList                                         @fragment
        Attribute                                           @fragment
          Identifier                                        fragment
      FunctionHeader                                        fn fragShader(in1: A, @location(2) in2: f32) -> @location(0) vec4<f32>
        Keyword                                             fn
        Identifier                                          fragShader
        ParamList                                           in1: A, @location(2) in2: f32
          Param                                             in1: A
            AttributeList                                   
            Identifier                                      in1
            TypeDeclaration                                 A
              Identifier                                    A
          Param                                             @location(2) in2: f32
            AttributeList                                   @location(2)
              Attribute                                     @location(2)
                Identifier                                  location
                IntLiteral                                  2
            Identifier                                      in2
            TypeDeclaration                                 f32
              Type                                          f32
        ReturnType                                          -> @location(0) vec4<f32>
          AttributeList                                     @location(0)
            Attribute                                       @location(0)
              Identifier                                    location
              IntLiteral                                    0
          TypeDeclaration                                   vec4<f32>
            Type                                            vec4
            TypeDeclaration                                 f32
              Type                                          f32
      CompoundStatement                                     {⮐ }
`;

exports[`WGSL grammar snapshots parses a test program 7`] = `
Program                                                     ⮐ const foo: f32 = 1.0;⮐ const WAT = true;⮐ struct s { x: i32 };⮐ fn main() -> @builtin vec4<f32> {⮐   var bar: i32 = wat(5, 6);⮐   let x: i32 = 4 + 5 + -6 + (-7);⮐   return vec4<f32>(0.1, 0.2, 0.3, 1.0);⮐ }⮐ 
  LocalDeclaration                                          ⮐ const foo: f32 = 1.0;
    GlobalConstantDeclaration                               ⮐ const foo: f32 = 1.0
      AttributeList                                         
      Keyword                                               const
      VariableIdentifier                                    foo: f32
        Identifier                                          foo
        TypeDeclaration                                     f32
          Type                                              f32
      Assign                                                =
      Value                                                 1.0
        FloatLiteral                                        1.0
  LocalDeclaration                                          ⮐ const WAT = true;
    GlobalConstantDeclaration                               ⮐ const WAT = true
      AttributeList                                         
      Keyword                                               const
      VariableIdentifier                                    WAT
        Identifier                                          WAT
      Assign                                                =
      Value                                                 true
        Boolean                                             true
  LocalDeclaration                                          ⮐ struct s { x: i32 }
    StructDeclaration                                       ⮐ struct s { x: i32 }
      AttributeList                                         
      Keyword                                               struct
      Identifier                                            s
      StructBodyDeclaration                                 { x: i32 }
        StructMember                                         x: i32
          AttributeList                                     
          PrivateIdentifier                                 x
            Identifier                                      x
          TypeDeclaration                                   i32
            Type                                            i32
  LocalDeclaration                                          ⮐ fn main() -> @builtin vec4<f32> {⮐   var bar: i32 = wat(5, 6);⮐   let x: i32 = 4 + 5 + -6 + (-7);⮐   return vec4<f32>(0.1, 0.2, 0.3, 1.0);⮐ }
    FunctionDeclaration                                     ⮐ fn main() -> @builtin vec4<f32> {⮐   var bar: i32 = wat(5, 6);⮐   let x: i32 = 4 + 5 + -6 + (-7);⮐   return vec4<f32>(0.1, 0.2, 0.3, 1.0);⮐ }
      AttributeList                                         
      FunctionHeader                                        fn main() -> @builtin vec4<f32>
        Keyword                                             fn
        Identifier                                          main
        ParamList                                           
        ReturnType                                          -> @builtin vec4<f32>
          AttributeList                                     @builtin
            Attribute                                       @builtin
              Identifier                                    builtin
          TypeDeclaration                                   vec4<f32>
            Type                                            vec4
            TypeDeclaration                                 f32
              Type                                          f32
      CompoundStatement                                     {⮐   var bar: i32 = wat(5, 6);⮐   let x: i32 = 4 + 5 + -6 + (-7);⮐   return vec4<f32>(0.1, 0.2, 0.3, 1.0);⮐ }
        Statement                                           var bar: i32 = wat(5, 6);
          Keyword                                           var
          VariableIdentifier                                bar: i32
            Identifier                                      bar
            TypeDeclaration                                 i32
              Type                                          i32
          Assign                                            =
          Value                                             wat(5, 6)
            FunctionCall                                    wat
              Identifier                                    wat
            IntLiteral                                      5
            IntLiteral                                      6
        Statement                                           let x: i32 = 4 + 5 + -6 + (-7);
          Keyword                                           let
          VariableIdentifier                                x: i32
            Identifier                                      x
            TypeDeclaration                                 i32
              Type                                          i32
          Assign                                            =
          Value                                             4 + 5 + -6 + (-7)
            IntLiteral                                      4
            Add                                             +
            IntLiteral                                      5
            Add                                             +
            Sub                                             -
            IntLiteral                                      6
            Add                                             +
            Sub                                             -
            IntLiteral                                      7
        Statement                                           return vec4<f32>(0.1, 0.2, 0.3, 1.0);
          Keyword                                           return
          TypeDeclaration                                   vec4<f32>
            Type                                            vec4
            TypeDeclaration                                 f32
              Type                                          f32
          FloatLiteral                                      0.1
          FloatLiteral                                      0.2
          FloatLiteral                                      0.3
          FloatLiteral                                      1.0
`;

exports[`WGSL grammar snapshots parses a test program 8`] = `
Program                                                     ⮐ fn main() {⮐   let x: i32 = 1;⮐   let y: i32 = 2;⮐   if (x) { if (y) { } } else { }⮐   if (x) { if (y) { } else { } }⮐ }⮐ 
  LocalDeclaration                                          ⮐ fn main() {⮐   let x: i32 = 1;⮐   let y: i32 = 2;⮐   if (x) { if (y) { } } else { }⮐   if (x) { if (y) { } else { } }⮐ }
    FunctionDeclaration                                     ⮐ fn main() {⮐   let x: i32 = 1;⮐   let y: i32 = 2;⮐   if (x) { if (y) { } } else { }⮐   if (x) { if (y) { } else { } }⮐ }
      AttributeList                                         
      FunctionHeader                                        fn main()
        Keyword                                             fn
        Identifier                                          main
        ParamList                                           
        ReturnType                                          
      CompoundStatement                                     {⮐   let x: i32 = 1;⮐   let y: i32 = 2;⮐   if (x) { if (y) { } } else { }⮐   if (x) { if (y) { } else { } }⮐ }
        Statement                                           let x: i32 = 1;
          Keyword                                           let
          VariableIdentifier                                x: i32
            Identifier                                      x
            TypeDeclaration                                 i32
              Type                                          i32
          Assign                                            =
          Value                                             1
            IntLiteral                                      1
        Statement                                           let y: i32 = 2;
          Keyword                                           let
          VariableIdentifier                                y: i32
            Identifier                                      y
            TypeDeclaration                                 i32
              Type                                          i32
          Assign                                            =
          Value                                             2
            IntLiteral                                      2
        Statement                                           if (x) { if (y) { } } else { }
          Keyword                                           if
          Identifier                                        x
          CompoundStatement                                 { if (y) { } }
            Statement                                       if (y) { }
              Keyword                                       if
              Identifier                                    y
              CompoundStatement                             { }
          Keyword                                           else
          CompoundStatement                                 { }
        Statement                                           if (x) { if (y) { } else { } }
          Keyword                                           if
          Identifier                                        x
          CompoundStatement                                 { if (y) { } else { } }
            Statement                                       if (y) { } else { }
              Keyword                                       if
              Identifier                                    y
              CompoundStatement                             { }
              Keyword                                       else
              CompoundStatement                             { }
`;

exports[`WGSL grammar snapshots parses a test program 9`] = `
Program                                                     ⮐ fn main() {⮐   let x: i32 = 1;⮐   /*⮐     /*⮐     let y: i32 = 2;⮐     */⮐   if (x) { if (y) { } else { } }⮐   */⮐   wat();⮐ }⮐ 
  LocalDeclaration                                          ⮐ fn main() {⮐   let x: i32 = 1;⮐   /*⮐     /*⮐     let y: i32 = 2;⮐     */⮐   if (x) { if (y) { } else { } }⮐   */⮐   wat();⮐ }
    FunctionDeclaration                                     ⮐ fn main() {⮐   let x: i32 = 1;⮐   /*⮐     /*⮐     let y: i32 = 2;⮐     */⮐   if (x) { if (y) { } else { } }⮐   */⮐   wat();⮐ }
      AttributeList                                         
      FunctionHeader                                        fn main()
        Keyword                                             fn
        Identifier                                          main
        ParamList                                           
        ReturnType                                          
      CompoundStatement                                     {⮐   let x: i32 = 1;⮐   /*⮐     /*⮐     let y: i32 = 2;⮐     */⮐   if (x) { if (y) { } else { } }⮐   */⮐   wat();⮐ }
        Statement                                           let x: i32 = 1;
          Keyword                                           let
          VariableIdentifier                                x: i32
            Identifier                                      x
            TypeDeclaration                                 i32
              Type                                          i32
          Assign                                            =
          Value                                             1
            IntLiteral                                      1
        Statement                                           wat();
          Identifier                                        wat
`;

exports[`WGSL grammar snapshots parses a test program 10`] = `
Program                                                     ⮐ import {MeshVertex} from 'use/types';⮐ import {viewUniforms as view, worldToClip} from 'use/view';⮐ import {getQuadUV} from 'geometry/quad';⮐ ⮐ import 'test';⮐ ⮐ @optional @link fn getInt() -> i32 {}⮐ ⮐ @export fn main() {}⮐ 
  ImportDeclaration                                         import {MeshVertex} from 'use/types'
    Keyword                                                 import
    ImportDeclarationList                                   {MeshVertex}
      ImportDeclarationIdentifier                           MeshVertex
        Identifier                                          MeshVertex
    String                                                  'use/types'
  ImportDeclaration                                         import {viewUniforms as view, worldToClip} from 'use/view'
    Keyword                                                 import
    ImportDeclarationList                                   {viewUniforms as view, worldToClip}
      ImportDeclarationIdentifier                           viewUniforms as view
        Identifier                                          viewUniforms
        Identifier                                          view
      ImportDeclarationIdentifier                           worldToClip
        Identifier                                          worldToClip
    String                                                  'use/view'
  ImportDeclaration                                         import {getQuadUV} from 'geometry/quad'
    Keyword                                                 import
    ImportDeclarationList                                   {getQuadUV}
      ImportDeclarationIdentifier                           getQuadUV
        Identifier                                          getQuadUV
    String                                                  'geometry/quad'
  ImportDeclaration                                         import 'test'
    Keyword                                                 import
    String                                                  'test'
  LocalDeclaration                                          @optional @link fn getInt() -> i32 {}
    FunctionDeclaration                                     @optional @link fn getInt() -> i32 {}
      AttributeList                                         @optional @link
        Attribute                                           @optional
          Identifier                                        optional
        Attribute                                           @link
          Identifier                                        link
      FunctionHeader                                        fn getInt() -> i32
        Keyword                                             fn
        Identifier                                          getInt
        ParamList                                           
        ReturnType                                          -> i32
          AttributeList                                     
          TypeDeclaration                                   i32
            Type                                            i32
      CompoundStatement                                     {}
  LocalDeclaration                                          @export fn main() {}
    FunctionDeclaration                                     @export fn main() {}
      AttributeList                                         @export
        Attribute                                           @export
          Identifier                                        export
      FunctionHeader                                        fn main()
        Keyword                                             fn
        Identifier                                          main
        ParamList                                           
        ReturnType                                          
      CompoundStatement                                     {}
`;

exports[`WGSL grammar snapshots parses a test program 11`] = `
Program                                                     ⮐ use 'use/types'::{MeshVertex};⮐ use 'use/view'::{viewUniforms as view, worldToClip};⮐ use 'geometry/quad'::{getQuadUV};⮐ ⮐ use 'test';⮐ ⮐ @optional @link fn getInt() -> i32 {}⮐ ⮐ @export fn main() {}⮐ 
  ImportDeclaration                                         use 'use/types'::{MeshVertex}
    Keyword                                                 use
    String                                                  'use/types'
    ImportDeclarationList                                   {MeshVertex}
      ImportDeclarationIdentifier                           MeshVertex
        Identifier                                          MeshVertex
  ImportDeclaration                                         use 'use/view'::{viewUniforms as view, worldToClip}
    Keyword                                                 use
    String                                                  'use/view'
    ImportDeclarationList                                   {viewUniforms as view, worldToClip}
      ImportDeclarationIdentifier                           viewUniforms as view
        Identifier                                          viewUniforms
        Identifier                                          view
      ImportDeclarationIdentifier                           worldToClip
        Identifier                                          worldToClip
  ImportDeclaration                                         use 'geometry/quad'::{getQuadUV}
    Keyword                                                 use
    String                                                  'geometry/quad'
    ImportDeclarationList                                   {getQuadUV}
      ImportDeclarationIdentifier                           getQuadUV
        Identifier                                          getQuadUV
  ImportDeclaration                                         use 'test'
    Keyword                                                 use
    String                                                  'test'
  LocalDeclaration                                          @optional @link fn getInt() -> i32 {}
    FunctionDeclaration                                     @optional @link fn getInt() -> i32 {}
      AttributeList                                         @optional @link
        Attribute                                           @optional
          Identifier                                        optional
        Attribute                                           @link
          Identifier                                        link
      FunctionHeader                                        fn getInt() -> i32
        Keyword                                             fn
        Identifier                                          getInt
        ParamList                                           
        ReturnType                                          -> i32
          AttributeList                                     
          TypeDeclaration                                   i32
            Type                                            i32
      CompoundStatement                                     {}
  LocalDeclaration                                          @export fn main() {}
    FunctionDeclaration                                     @export fn main() {}
      AttributeList                                         @export
        Attribute                                           @export
          Identifier                                        export
      FunctionHeader                                        fn main()
        Keyword                                             fn
        Identifier                                          main
        ParamList                                           
        ReturnType                                          
      CompoundStatement                                     {}
`;

exports[`WGSL grammar snapshots parses a test program 12`] = `
Program                                                     ⮐ fn getQuad(vertex: i32) -> MeshVertex {⮐   let uv: vec2<f32> = getQuadUV(vertex);⮐   let position: vec4<f32> = vec4<f32>(uv * 2.0 - 1.0, 0.0, 1.0);⮐   let color: vec4<f32> = vec4<f32>(1.0, 0.0, 1.0, 1.0);⮐   return MeshVertex(position, color, uv);⮐ }⮐ 
  LocalDeclaration                                          ⮐ fn getQuad(vertex: i32) -> MeshVertex {⮐   let uv: vec2<f32> = getQuadUV(vertex);⮐   let position: vec4<f32> = vec4<f32>(uv * 2.0 - 1.0, 0.0, 1.0);⮐   let color: vec4<f32> = vec4<f32>(1.0, 0.0, 1.0, 1.0);⮐   return MeshVertex(position, color, uv);⮐ }
    FunctionDeclaration                                     ⮐ fn getQuad(vertex: i32) -> MeshVertex {⮐   let uv: vec2<f32> = getQuadUV(vertex);⮐   let position: vec4<f32> = vec4<f32>(uv * 2.0 - 1.0, 0.0, 1.0);⮐   let color: vec4<f32> = vec4<f32>(1.0, 0.0, 1.0, 1.0);⮐   return MeshVertex(position, color, uv);⮐ }
      AttributeList                                         
      FunctionHeader                                        fn getQuad(vertex: i32) -> MeshVertex
        Keyword                                             fn
        Identifier                                          getQuad
        ParamList                                           vertex: i32
          Param                                             vertex: i32
            AttributeList                                   
            Identifier                                      vertex
            TypeDeclaration                                 i32
              Type                                          i32
        ReturnType                                          -> MeshVertex
          AttributeList                                     
          TypeDeclaration                                   MeshVertex
            Identifier                                      MeshVertex
      CompoundStatement                                     {⮐   let uv: vec2<f32> = getQuadUV(vertex);⮐   let position: vec4<f32> = vec4<f32>(uv * 2.0 - 1.0, 0.0, 1.0);⮐   let color: vec4<f32> = vec4<f32>(1.0, 0.0, 1.0, 1.0);⮐   return MeshVertex(position, color, uv);⮐ }
        Statement                                           let uv: vec2<f32> = getQuadUV(vertex);
          Keyword                                           let
          VariableIdentifier                                uv: vec2<f32>
            Identifier                                      uv
            TypeDeclaration                                 vec2<f32>
              Type                                          vec2
              TypeDeclaration                               f32
                Type                                        f32
          Assign                                            =
          Value                                             getQuadUV(vertex)
            FunctionCall                                    getQuadUV
              Identifier                                    getQuadUV
            Identifier                                      vertex
        Statement                                           let position: vec4<f32> = vec4<f32>(uv * 2.0 - 1.0, 0.0, 1.0);
          Keyword                                           let
          VariableIdentifier                                position: vec4<f32>
            Identifier                                      position
            TypeDeclaration                                 vec4<f32>
              Type                                          vec4
              TypeDeclaration                               f32
                Type                                        f32
          Assign                                            =
          Value                                             vec4<f32>(uv * 2.0 - 1.0, 0.0, 1.0)
            TypeDeclaration                                 vec4<f32>
              Type                                          vec4
              TypeDeclaration                               f32
                Type                                        f32
            Identifier                                      uv
            Mul                                             *
            FloatLiteral                                    2.0
            Sub                                             -
            FloatLiteral                                    1.0
            FloatLiteral                                    0.0
            FloatLiteral                                    1.0
        Statement                                           let color: vec4<f32> = vec4<f32>(1.0, 0.0, 1.0, 1.0);
          Keyword                                           let
          VariableIdentifier                                color: vec4<f32>
            Identifier                                      color
            TypeDeclaration                                 vec4<f32>
              Type                                          vec4
              TypeDeclaration                               f32
                Type                                        f32
          Assign                                            =
          Value                                             vec4<f32>(1.0, 0.0, 1.0, 1.0)
            TypeDeclaration                                 vec4<f32>
              Type                                          vec4
              TypeDeclaration                               f32
                Type                                        f32
            FloatLiteral                                    1.0
            FloatLiteral                                    0.0
            FloatLiteral                                    1.0
            FloatLiteral                                    1.0
        Statement                                           return MeshVertex(position, color, uv);
          Keyword                                           return
          FunctionCall                                      MeshVertex
            Identifier                                      MeshVertex
          Identifier                                        position
          Identifier                                        color
          Identifier                                        uv
`;

exports[`WGSL grammar snapshots parses a test program 13`] = `
Program                                                     ⮐ type integer = i32;⮐ 
  LocalDeclaration                                          ⮐ type integer = i32;
    TypeAliasDeclaration                                    ⮐ type integer = i32
      AttributeList                                         
      Keyword                                               type
      Identifier                                            integer
      Assign                                                =
      TypeDeclaration                                       i32
        Type                                                i32
`;

exports[`WGSL grammar snapshots parses a test program 14`] = `
Program                                                     ⮐ var foo;⮐ // var foo;⮐ var foo;⮐ 
  LocalDeclaration                                          ⮐ var foo;
    GlobalVariableDeclaration                               ⮐ var foo
      AttributeList                                         
      GlobalVariable                                        var foo
        Keyword                                             var
        VariableIdentifier                                  foo
          Identifier                                        foo
  LocalDeclaration                                          ⮐ // var foo;⮐ var foo;
    GlobalVariableDeclaration                               ⮐ // var foo;⮐ var foo
      AttributeList                                         
      GlobalVariable                                        var foo
        Keyword                                             var
        VariableIdentifier                                  foo
          Identifier                                        foo
`;

exports[`WGSL grammar snapshots parses a test program 15`] = `
Program                                                     ⮐ struct __underscore {⮐   foo: f32,⮐   _bar: f32,⮐   __baz: f32,⮐ };⮐ 
  LocalDeclaration                                          ⮐ struct __underscore {⮐   foo: f32,⮐   _bar: f32,⮐   __baz: f32,⮐ }
    StructDeclaration                                       ⮐ struct __underscore {⮐   foo: f32,⮐   _bar: f32,⮐   __baz: f32,⮐ }
      AttributeList                                         
      Keyword                                               struct
      Identifier                                            __underscore
      StructBodyDeclaration                                 {⮐   foo: f32,⮐   _bar: f32,⮐   __baz: f32,⮐ }
        StructMember                                        ⮐   foo: f32
          AttributeList                                     
          PrivateIdentifier                                 foo
            Identifier                                      foo
          TypeDeclaration                                   f32
            Type                                            f32
        StructMember                                        ⮐   _bar: f32
          AttributeList                                     
          PrivateIdentifier                                 _bar
            Identifier                                      _bar
          TypeDeclaration                                   f32
            Type                                            f32
        StructMember                                        ⮐   __baz: f32
          AttributeList                                     
          PrivateIdentifier                                 __baz
            Identifier                                      __baz
          TypeDeclaration                                   f32
            Type                                            f32
`;

exports[`WGSL grammar snapshots parses a test program 16`] = `
Program                                                     ⮐ @fragment fn main(arg: VertexOutput) -> @location(0) vec4f { return arg.color; }⮐ 
  LocalDeclaration                                          @fragment fn main(arg: VertexOutput) -> @location(0) vec4f { return arg.color; }
    FunctionDeclaration                                     @fragment fn main(arg: VertexOutput) -> @location(0) vec4f { return arg.color; }
      AttributeList                                         @fragment
        Attribute                                           @fragment
          Identifier                                        fragment
      FunctionHeader                                        fn main(arg: VertexOutput) -> @location(0) vec4f
        Keyword                                             fn
        Identifier                                          main
        ParamList                                           arg: VertexOutput
          Param                                             arg: VertexOutput
            AttributeList                                   
            Identifier                                      arg
            TypeDeclaration                                 VertexOutput
              Identifier                                    VertexOutput
        ReturnType                                          -> @location(0) vec4f
          AttributeList                                     @location(0)
            Attribute                                       @location(0)
              Identifier                                    location
              IntLiteral                                    0
          TypeDeclaration                                   vec4f
            Type                                            vec4f
      CompoundStatement                                     { return arg.color; }
        Statement                                           return arg.color;
          Keyword                                           return
          Identifier                                        arg
          FieldAccess                                       .color
            PrivateIdentifier                               color
              Identifier                                    color
`;
